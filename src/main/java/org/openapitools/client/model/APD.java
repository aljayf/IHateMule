/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.C314;
import org.openapitools.client.model.C317;
import org.openapitools.client.model.C318;
import org.openapitools.client.model.C320;
import org.openapitools.client.model.C348;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APD
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class APD {
  public static final String SERIALIZED_NAME_C31401 = "C314_01";
  @SerializedName(SERIALIZED_NAME_C31401)
  private C314 C314_01;

  public static final String SERIALIZED_NAME_C34802 = "C348_02";
  @SerializedName(SERIALIZED_NAME_C34802)
  private C348 C348_02;

  public static final String SERIALIZED_NAME_C34803 = "C348_03";
  @SerializedName(SERIALIZED_NAME_C34803)
  private C348 C348_03;

  public static final String SERIALIZED_NAME_C31704 = "C317_04";
  @SerializedName(SERIALIZED_NAME_C31704)
  private C317 C317_04;

  public static final String SERIALIZED_NAME_C31805 = "C318_05";
  @SerializedName(SERIALIZED_NAME_C31805)
  private C318 C318_05;

  public static final String SERIALIZED_NAME_C32006 = "C320_06";
  @SerializedName(SERIALIZED_NAME_C32006)
  private List<C320> C320_06;

  public APD() {
  }

  public APD C314_01(C314 C314_01) {
    
    this.C314_01 = C314_01;
    return this;
  }

   /**
   * Get C314_01
   * @return C314_01
  **/
  @javax.annotation.Nullable

  public C314 getC31401() {
    return C314_01;
  }


  public void setC31401(C314 C314_01) {
    this.C314_01 = C314_01;
  }


  public APD C348_02(C348 C348_02) {
    
    this.C348_02 = C348_02;
    return this;
  }

   /**
   * Get C348_02
   * @return C348_02
  **/
  @javax.annotation.Nullable

  public C348 getC34802() {
    return C348_02;
  }


  public void setC34802(C348 C348_02) {
    this.C348_02 = C348_02;
  }


  public APD C348_03(C348 C348_03) {
    
    this.C348_03 = C348_03;
    return this;
  }

   /**
   * Get C348_03
   * @return C348_03
  **/
  @javax.annotation.Nullable

  public C348 getC34803() {
    return C348_03;
  }


  public void setC34803(C348 C348_03) {
    this.C348_03 = C348_03;
  }


  public APD C317_04(C317 C317_04) {
    
    this.C317_04 = C317_04;
    return this;
  }

   /**
   * Get C317_04
   * @return C317_04
  **/
  @javax.annotation.Nullable

  public C317 getC31704() {
    return C317_04;
  }


  public void setC31704(C317 C317_04) {
    this.C317_04 = C317_04;
  }


  public APD C318_05(C318 C318_05) {
    
    this.C318_05 = C318_05;
    return this;
  }

   /**
   * Get C318_05
   * @return C318_05
  **/
  @javax.annotation.Nullable

  public C318 getC31805() {
    return C318_05;
  }


  public void setC31805(C318 C318_05) {
    this.C318_05 = C318_05;
  }


  public APD C320_06(List<C320> C320_06) {
    
    this.C320_06 = C320_06;
    return this;
  }

  public APD addC32006Item(C320 C320_06Item) {
    if (this.C320_06 == null) {
      this.C320_06 = new ArrayList<>();
    }
    this.C320_06.add(C320_06Item);
    return this;
  }

   /**
   * Get C320_06
   * @return C320_06
  **/
  @javax.annotation.Nullable

  public List<C320> getC32006() {
    return C320_06;
  }


  public void setC32006(List<C320> C320_06) {
    this.C320_06 = C320_06;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APD APD = (APD) o;
    return Objects.equals(this.C314_01, APD.C314_01) &&
        Objects.equals(this.C348_02, APD.C348_02) &&
        Objects.equals(this.C348_03, APD.C348_03) &&
        Objects.equals(this.C317_04, APD.C317_04) &&
        Objects.equals(this.C318_05, APD.C318_05) &&
        Objects.equals(this.C320_06, APD.C320_06);
  }

  @Override
  public int hashCode() {
    return Objects.hash(C314_01, C348_02, C348_03, C317_04, C318_05, C320_06);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APD {\n");
    sb.append("    C314_01: ").append(toIndentedString(C314_01)).append("\n");
    sb.append("    C348_02: ").append(toIndentedString(C348_02)).append("\n");
    sb.append("    C348_03: ").append(toIndentedString(C348_03)).append("\n");
    sb.append("    C317_04: ").append(toIndentedString(C317_04)).append("\n");
    sb.append("    C318_05: ").append(toIndentedString(C318_05)).append("\n");
    sb.append("    C320_06: ").append(toIndentedString(C320_06)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("C314_01");
    openapiFields.add("C348_02");
    openapiFields.add("C348_03");
    openapiFields.add("C317_04");
    openapiFields.add("C318_05");
    openapiFields.add("C320_06");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APD
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!APD.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APD is not found in the empty JSON string", APD.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APD.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APD` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `C314_01`
      if (jsonObj.get("C314_01") != null && !jsonObj.get("C314_01").isJsonNull()) {
        C314.validateJsonObject(jsonObj.getAsJsonObject("C314_01"));
      }
      // validate the optional field `C348_02`
      if (jsonObj.get("C348_02") != null && !jsonObj.get("C348_02").isJsonNull()) {
        C348.validateJsonObject(jsonObj.getAsJsonObject("C348_02"));
      }
      // validate the optional field `C348_03`
      if (jsonObj.get("C348_03") != null && !jsonObj.get("C348_03").isJsonNull()) {
        C348.validateJsonObject(jsonObj.getAsJsonObject("C348_03"));
      }
      // validate the optional field `C317_04`
      if (jsonObj.get("C317_04") != null && !jsonObj.get("C317_04").isJsonNull()) {
        C317.validateJsonObject(jsonObj.getAsJsonObject("C317_04"));
      }
      // validate the optional field `C318_05`
      if (jsonObj.get("C318_05") != null && !jsonObj.get("C318_05").isJsonNull()) {
        C318.validateJsonObject(jsonObj.getAsJsonObject("C318_05"));
      }
      if (jsonObj.get("C320_06") != null && !jsonObj.get("C320_06").isJsonNull()) {
        JsonArray jsonArrayC320_06 = jsonObj.getAsJsonArray("C320_06");
        if (jsonArrayC320_06 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("C320_06").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `C320_06` to be an array in the JSON string but got `%s`", jsonObj.get("C320_06").toString()));
          }

          // validate the optional field `C320_06` (array)
          for (int i = 0; i < jsonArrayC320_06.size(); i++) {
            C320.validateJsonObject(jsonArrayC320_06.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APD.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APD' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APD> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APD.class));

       return (TypeAdapter<T>) new TypeAdapter<APD>() {
           @Override
           public void write(JsonWriter out, APD value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APD read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APD given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APD
  * @throws IOException if the JSON string is invalid with respect to APD
  */
  public static APD fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APD.class);
  }

 /**
  * Convert an instance of APD to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

