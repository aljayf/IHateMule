/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID5153;
import org.openapitools.client.model.EDIFACTID5419;
import org.openapitools.client.model.EDIFACTID6321;
import org.openapitools.client.model.EDIFACTID6345;
import org.openapitools.client.model.EDIFACTID9875;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C661
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C661 {
  public static final String SERIALIZED_NAME_CONVERSION_TYPE01 = "ConversionType_01";
  @SerializedName(SERIALIZED_NAME_CONVERSION_TYPE01)
  private EDIFACTID9875 conversionType01;

  public static final String SERIALIZED_NAME_CURRENCY02 = "Currency_02";
  @SerializedName(SERIALIZED_NAME_CURRENCY02)
  private EDIFACTID6345 currency02;

  public static final String SERIALIZED_NAME_RATE_TYPE_QUALIFIER03 = "RateTypeQualifier_03";
  @SerializedName(SERIALIZED_NAME_RATE_TYPE_QUALIFIER03)
  private EDIFACTID5419 rateTypeQualifier03;

  public static final String SERIALIZED_NAME_MONETARY_AMOUNT04 = "MonetaryAmount_04";
  @SerializedName(SERIALIZED_NAME_MONETARY_AMOUNT04)
  private String monetaryAmount04;

  public static final String SERIALIZED_NAME_MONETARY_AMOUNT05 = "MonetaryAmount_05";
  @SerializedName(SERIALIZED_NAME_MONETARY_AMOUNT05)
  private String monetaryAmount05;

  public static final String SERIALIZED_NAME_DUTY_TAX_FEE_TYPE06 = "DutyTaxFeeType_06";
  @SerializedName(SERIALIZED_NAME_DUTY_TAX_FEE_TYPE06)
  private EDIFACTID5153 dutyTaxFeeType06;

  public static final String SERIALIZED_NAME_MEASUREMENT_VALUE07 = "MeasurementValue_07";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_VALUE07)
  private String measurementValue07;

  public static final String SERIALIZED_NAME_MEASUREMENT_SIGNIFICANCE08 = "MeasurementSignificance_08";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_SIGNIFICANCE08)
  private EDIFACTID6321 measurementSignificance08;

  public C661() {
  }

  public C661 conversionType01(EDIFACTID9875 conversionType01) {
    
    this.conversionType01 = conversionType01;
    return this;
  }

   /**
   * Get conversionType01
   * @return conversionType01
  **/
  @javax.annotation.Nullable

  public EDIFACTID9875 getConversionType01() {
    return conversionType01;
  }


  public void setConversionType01(EDIFACTID9875 conversionType01) {
    this.conversionType01 = conversionType01;
  }


  public C661 currency02(EDIFACTID6345 currency02) {
    
    this.currency02 = currency02;
    return this;
  }

   /**
   * Get currency02
   * @return currency02
  **/
  @javax.annotation.Nullable

  public EDIFACTID6345 getCurrency02() {
    return currency02;
  }


  public void setCurrency02(EDIFACTID6345 currency02) {
    this.currency02 = currency02;
  }


  public C661 rateTypeQualifier03(EDIFACTID5419 rateTypeQualifier03) {
    
    this.rateTypeQualifier03 = rateTypeQualifier03;
    return this;
  }

   /**
   * Get rateTypeQualifier03
   * @return rateTypeQualifier03
  **/
  @javax.annotation.Nullable

  public EDIFACTID5419 getRateTypeQualifier03() {
    return rateTypeQualifier03;
  }


  public void setRateTypeQualifier03(EDIFACTID5419 rateTypeQualifier03) {
    this.rateTypeQualifier03 = rateTypeQualifier03;
  }


  public C661 monetaryAmount04(String monetaryAmount04) {
    
    this.monetaryAmount04 = monetaryAmount04;
    return this;
  }

   /**
   * Get monetaryAmount04
   * @return monetaryAmount04
  **/
  @javax.annotation.Nullable

  public String getMonetaryAmount04() {
    return monetaryAmount04;
  }


  public void setMonetaryAmount04(String monetaryAmount04) {
    this.monetaryAmount04 = monetaryAmount04;
  }


  public C661 monetaryAmount05(String monetaryAmount05) {
    
    this.monetaryAmount05 = monetaryAmount05;
    return this;
  }

   /**
   * Get monetaryAmount05
   * @return monetaryAmount05
  **/
  @javax.annotation.Nullable

  public String getMonetaryAmount05() {
    return monetaryAmount05;
  }


  public void setMonetaryAmount05(String monetaryAmount05) {
    this.monetaryAmount05 = monetaryAmount05;
  }


  public C661 dutyTaxFeeType06(EDIFACTID5153 dutyTaxFeeType06) {
    
    this.dutyTaxFeeType06 = dutyTaxFeeType06;
    return this;
  }

   /**
   * Get dutyTaxFeeType06
   * @return dutyTaxFeeType06
  **/
  @javax.annotation.Nullable

  public EDIFACTID5153 getDutyTaxFeeType06() {
    return dutyTaxFeeType06;
  }


  public void setDutyTaxFeeType06(EDIFACTID5153 dutyTaxFeeType06) {
    this.dutyTaxFeeType06 = dutyTaxFeeType06;
  }


  public C661 measurementValue07(String measurementValue07) {
    
    this.measurementValue07 = measurementValue07;
    return this;
  }

   /**
   * Get measurementValue07
   * @return measurementValue07
  **/
  @javax.annotation.Nullable

  public String getMeasurementValue07() {
    return measurementValue07;
  }


  public void setMeasurementValue07(String measurementValue07) {
    this.measurementValue07 = measurementValue07;
  }


  public C661 measurementSignificance08(EDIFACTID6321 measurementSignificance08) {
    
    this.measurementSignificance08 = measurementSignificance08;
    return this;
  }

   /**
   * Get measurementSignificance08
   * @return measurementSignificance08
  **/
  @javax.annotation.Nullable

  public EDIFACTID6321 getMeasurementSignificance08() {
    return measurementSignificance08;
  }


  public void setMeasurementSignificance08(EDIFACTID6321 measurementSignificance08) {
    this.measurementSignificance08 = measurementSignificance08;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C661 C661 = (C661) o;
    return Objects.equals(this.conversionType01, C661.conversionType01) &&
        Objects.equals(this.currency02, C661.currency02) &&
        Objects.equals(this.rateTypeQualifier03, C661.rateTypeQualifier03) &&
        Objects.equals(this.monetaryAmount04, C661.monetaryAmount04) &&
        Objects.equals(this.monetaryAmount05, C661.monetaryAmount05) &&
        Objects.equals(this.dutyTaxFeeType06, C661.dutyTaxFeeType06) &&
        Objects.equals(this.measurementValue07, C661.measurementValue07) &&
        Objects.equals(this.measurementSignificance08, C661.measurementSignificance08);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversionType01, currency02, rateTypeQualifier03, monetaryAmount04, monetaryAmount05, dutyTaxFeeType06, measurementValue07, measurementSignificance08);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C661 {\n");
    sb.append("    conversionType01: ").append(toIndentedString(conversionType01)).append("\n");
    sb.append("    currency02: ").append(toIndentedString(currency02)).append("\n");
    sb.append("    rateTypeQualifier03: ").append(toIndentedString(rateTypeQualifier03)).append("\n");
    sb.append("    monetaryAmount04: ").append(toIndentedString(monetaryAmount04)).append("\n");
    sb.append("    monetaryAmount05: ").append(toIndentedString(monetaryAmount05)).append("\n");
    sb.append("    dutyTaxFeeType06: ").append(toIndentedString(dutyTaxFeeType06)).append("\n");
    sb.append("    measurementValue07: ").append(toIndentedString(measurementValue07)).append("\n");
    sb.append("    measurementSignificance08: ").append(toIndentedString(measurementSignificance08)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConversionType_01");
    openapiFields.add("Currency_02");
    openapiFields.add("RateTypeQualifier_03");
    openapiFields.add("MonetaryAmount_04");
    openapiFields.add("MonetaryAmount_05");
    openapiFields.add("DutyTaxFeeType_06");
    openapiFields.add("MeasurementValue_07");
    openapiFields.add("MeasurementSignificance_08");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C661
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C661.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C661 is not found in the empty JSON string", C661.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C661.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C661` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("MonetaryAmount_04") != null && !jsonObj.get("MonetaryAmount_04").isJsonNull()) && !jsonObj.get("MonetaryAmount_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonetaryAmount_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonetaryAmount_04").toString()));
      }
      if ((jsonObj.get("MonetaryAmount_05") != null && !jsonObj.get("MonetaryAmount_05").isJsonNull()) && !jsonObj.get("MonetaryAmount_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonetaryAmount_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonetaryAmount_05").toString()));
      }
      if ((jsonObj.get("MeasurementValue_07") != null && !jsonObj.get("MeasurementValue_07").isJsonNull()) && !jsonObj.get("MeasurementValue_07").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeasurementValue_07` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeasurementValue_07").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C661.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C661' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C661> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C661.class));

       return (TypeAdapter<T>) new TypeAdapter<C661>() {
           @Override
           public void write(JsonWriter out, C661 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C661 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C661 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C661
  * @throws IOException if the JSON string is invalid with respect to C661
  */
  public static C661 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C661.class);
  }

 /**
  * Convert an instance of C661 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

