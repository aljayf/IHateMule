/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID1131;
import org.openapitools.client.model.EDIFACTID7009;
import org.openapitools.client.model.EDIFACTID7081;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ASG
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class ASG {
  public static final String SERIALIZED_NAME_ITEM_CHARACTERISTIC01 = "ItemCharacteristic_01";
  @SerializedName(SERIALIZED_NAME_ITEM_CHARACTERISTIC01)
  private EDIFACTID7081 itemCharacteristic01;

  public static final String SERIALIZED_NAME_ITEM_DESCRIPTION_IDENTIFICATION02 = "ItemDescriptionIdentification_02";
  @SerializedName(SERIALIZED_NAME_ITEM_DESCRIPTION_IDENTIFICATION02)
  private EDIFACTID7009 itemDescriptionIdentification02;

  public static final String SERIALIZED_NAME_CODE_LIST_QUALIFIER03 = "CodeListQualifier_03";
  @SerializedName(SERIALIZED_NAME_CODE_LIST_QUALIFIER03)
  private EDIFACTID1131 codeListQualifier03;

  public static final String SERIALIZED_NAME_ITEM_DESCRIPTION_TYPE04 = "ItemDescriptionType_04";
  @SerializedName(SERIALIZED_NAME_ITEM_DESCRIPTION_TYPE04)
  private String itemDescriptionType04;

  public ASG() {
  }

  public ASG itemCharacteristic01(EDIFACTID7081 itemCharacteristic01) {
    
    this.itemCharacteristic01 = itemCharacteristic01;
    return this;
  }

   /**
   * Get itemCharacteristic01
   * @return itemCharacteristic01
  **/
  @javax.annotation.Nullable

  public EDIFACTID7081 getItemCharacteristic01() {
    return itemCharacteristic01;
  }


  public void setItemCharacteristic01(EDIFACTID7081 itemCharacteristic01) {
    this.itemCharacteristic01 = itemCharacteristic01;
  }


  public ASG itemDescriptionIdentification02(EDIFACTID7009 itemDescriptionIdentification02) {
    
    this.itemDescriptionIdentification02 = itemDescriptionIdentification02;
    return this;
  }

   /**
   * Get itemDescriptionIdentification02
   * @return itemDescriptionIdentification02
  **/
  @javax.annotation.Nullable

  public EDIFACTID7009 getItemDescriptionIdentification02() {
    return itemDescriptionIdentification02;
  }


  public void setItemDescriptionIdentification02(EDIFACTID7009 itemDescriptionIdentification02) {
    this.itemDescriptionIdentification02 = itemDescriptionIdentification02;
  }


  public ASG codeListQualifier03(EDIFACTID1131 codeListQualifier03) {
    
    this.codeListQualifier03 = codeListQualifier03;
    return this;
  }

   /**
   * Get codeListQualifier03
   * @return codeListQualifier03
  **/
  @javax.annotation.Nullable

  public EDIFACTID1131 getCodeListQualifier03() {
    return codeListQualifier03;
  }


  public void setCodeListQualifier03(EDIFACTID1131 codeListQualifier03) {
    this.codeListQualifier03 = codeListQualifier03;
  }


  public ASG itemDescriptionType04(String itemDescriptionType04) {
    
    this.itemDescriptionType04 = itemDescriptionType04;
    return this;
  }

   /**
   * Get itemDescriptionType04
   * @return itemDescriptionType04
  **/
  @javax.annotation.Nullable

  public String getItemDescriptionType04() {
    return itemDescriptionType04;
  }


  public void setItemDescriptionType04(String itemDescriptionType04) {
    this.itemDescriptionType04 = itemDescriptionType04;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ASG ASG = (ASG) o;
    return Objects.equals(this.itemCharacteristic01, ASG.itemCharacteristic01) &&
        Objects.equals(this.itemDescriptionIdentification02, ASG.itemDescriptionIdentification02) &&
        Objects.equals(this.codeListQualifier03, ASG.codeListQualifier03) &&
        Objects.equals(this.itemDescriptionType04, ASG.itemDescriptionType04);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemCharacteristic01, itemDescriptionIdentification02, codeListQualifier03, itemDescriptionType04);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ASG {\n");
    sb.append("    itemCharacteristic01: ").append(toIndentedString(itemCharacteristic01)).append("\n");
    sb.append("    itemDescriptionIdentification02: ").append(toIndentedString(itemDescriptionIdentification02)).append("\n");
    sb.append("    codeListQualifier03: ").append(toIndentedString(codeListQualifier03)).append("\n");
    sb.append("    itemDescriptionType04: ").append(toIndentedString(itemDescriptionType04)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ItemCharacteristic_01");
    openapiFields.add("ItemDescriptionIdentification_02");
    openapiFields.add("CodeListQualifier_03");
    openapiFields.add("ItemDescriptionType_04");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ASG
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ASG.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ASG is not found in the empty JSON string", ASG.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ASG.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ASG` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ItemDescriptionType_04") != null && !jsonObj.get("ItemDescriptionType_04").isJsonNull()) && !jsonObj.get("ItemDescriptionType_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemDescriptionType_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemDescriptionType_04").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ASG.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ASG' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ASG> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ASG.class));

       return (TypeAdapter<T>) new TypeAdapter<ASG>() {
           @Override
           public void write(JsonWriter out, ASG value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ASG read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ASG given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ASG
  * @throws IOException if the JSON string is invalid with respect to ASG
  */
  public static ASG fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ASG.class);
  }

 /**
  * Convert an instance of ASG to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

