/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID9906;
import org.openapitools.client.model.EDIFACTID9958;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C330
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C330 {
  public static final String SERIALIZED_NAME_COMPANY_IDENTIFICATION01 = "CompanyIdentification_01";
  @SerializedName(SERIALIZED_NAME_COMPANY_IDENTIFICATION01)
  private EDIFACTID9906 companyIdentification01;

  public static final String SERIALIZED_NAME_RESERVATION_CONTROL_NUMBER02 = "ReservationControlNumber_02";
  @SerializedName(SERIALIZED_NAME_RESERVATION_CONTROL_NUMBER02)
  private String reservationControlNumber02;

  public static final String SERIALIZED_NAME_RESERVATION_CONTROL_TYPE03 = "ReservationControlType_03";
  @SerializedName(SERIALIZED_NAME_RESERVATION_CONTROL_TYPE03)
  private EDIFACTID9958 reservationControlType03;

  public static final String SERIALIZED_NAME_FIRST_DATE04 = "FirstDate_04";
  @SerializedName(SERIALIZED_NAME_FIRST_DATE04)
  private String firstDate04;

  public static final String SERIALIZED_NAME_TIME05 = "Time_05";
  @SerializedName(SERIALIZED_NAME_TIME05)
  private String time05;

  public C330() {
  }

  public C330 companyIdentification01(EDIFACTID9906 companyIdentification01) {
    
    this.companyIdentification01 = companyIdentification01;
    return this;
  }

   /**
   * Get companyIdentification01
   * @return companyIdentification01
  **/
  @javax.annotation.Nullable

  public EDIFACTID9906 getCompanyIdentification01() {
    return companyIdentification01;
  }


  public void setCompanyIdentification01(EDIFACTID9906 companyIdentification01) {
    this.companyIdentification01 = companyIdentification01;
  }


  public C330 reservationControlNumber02(String reservationControlNumber02) {
    
    this.reservationControlNumber02 = reservationControlNumber02;
    return this;
  }

   /**
   * Get reservationControlNumber02
   * @return reservationControlNumber02
  **/
  @javax.annotation.Nullable

  public String getReservationControlNumber02() {
    return reservationControlNumber02;
  }


  public void setReservationControlNumber02(String reservationControlNumber02) {
    this.reservationControlNumber02 = reservationControlNumber02;
  }


  public C330 reservationControlType03(EDIFACTID9958 reservationControlType03) {
    
    this.reservationControlType03 = reservationControlType03;
    return this;
  }

   /**
   * Get reservationControlType03
   * @return reservationControlType03
  **/
  @javax.annotation.Nullable

  public EDIFACTID9958 getReservationControlType03() {
    return reservationControlType03;
  }


  public void setReservationControlType03(EDIFACTID9958 reservationControlType03) {
    this.reservationControlType03 = reservationControlType03;
  }


  public C330 firstDate04(String firstDate04) {
    
    this.firstDate04 = firstDate04;
    return this;
  }

   /**
   * Get firstDate04
   * @return firstDate04
  **/
  @javax.annotation.Nullable

  public String getFirstDate04() {
    return firstDate04;
  }


  public void setFirstDate04(String firstDate04) {
    this.firstDate04 = firstDate04;
  }


  public C330 time05(String time05) {
    
    this.time05 = time05;
    return this;
  }

   /**
   * Get time05
   * @return time05
  **/
  @javax.annotation.Nullable

  public String getTime05() {
    return time05;
  }


  public void setTime05(String time05) {
    this.time05 = time05;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C330 C330 = (C330) o;
    return Objects.equals(this.companyIdentification01, C330.companyIdentification01) &&
        Objects.equals(this.reservationControlNumber02, C330.reservationControlNumber02) &&
        Objects.equals(this.reservationControlType03, C330.reservationControlType03) &&
        Objects.equals(this.firstDate04, C330.firstDate04) &&
        Objects.equals(this.time05, C330.time05);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyIdentification01, reservationControlNumber02, reservationControlType03, firstDate04, time05);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C330 {\n");
    sb.append("    companyIdentification01: ").append(toIndentedString(companyIdentification01)).append("\n");
    sb.append("    reservationControlNumber02: ").append(toIndentedString(reservationControlNumber02)).append("\n");
    sb.append("    reservationControlType03: ").append(toIndentedString(reservationControlType03)).append("\n");
    sb.append("    firstDate04: ").append(toIndentedString(firstDate04)).append("\n");
    sb.append("    time05: ").append(toIndentedString(time05)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CompanyIdentification_01");
    openapiFields.add("ReservationControlNumber_02");
    openapiFields.add("ReservationControlType_03");
    openapiFields.add("FirstDate_04");
    openapiFields.add("Time_05");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C330
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C330.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C330 is not found in the empty JSON string", C330.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C330.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C330` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ReservationControlNumber_02") != null && !jsonObj.get("ReservationControlNumber_02").isJsonNull()) && !jsonObj.get("ReservationControlNumber_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReservationControlNumber_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReservationControlNumber_02").toString()));
      }
      if ((jsonObj.get("FirstDate_04") != null && !jsonObj.get("FirstDate_04").isJsonNull()) && !jsonObj.get("FirstDate_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstDate_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstDate_04").toString()));
      }
      if ((jsonObj.get("Time_05") != null && !jsonObj.get("Time_05").isJsonNull()) && !jsonObj.get("Time_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Time_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Time_05").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C330.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C330' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C330> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C330.class));

       return (TypeAdapter<T>) new TypeAdapter<C330>() {
           @Override
           public void write(JsonWriter out, C330 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C330 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C330 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C330
  * @throws IOException if the JSON string is invalid with respect to C330
  */
  public static C330 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C330.class);
  }

 /**
  * Convert an instance of C330 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

