/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.ATI;
import org.openapitools.client.model.CRI;
import org.openapitools.client.model.DID;
import org.openapitools.client.model.EQN;
import org.openapitools.client.model.FAR;
import org.openapitools.client.model.FOP;
import org.openapitools.client.model.FQU;
import org.openapitools.client.model.FTI;
import org.openapitools.client.model.IFT;
import org.openapitools.client.model.Loop10TKTREQ;
import org.openapitools.client.model.Loop13TKTREQ;
import org.openapitools.client.model.Loop4TKTREQ;
import org.openapitools.client.model.Loop6TKTREQ;
import org.openapitools.client.model.LoopABITKTREQ;
import org.openapitools.client.model.LoopPRTTKTREQ;
import org.openapitools.client.model.LoopREFTKTREQ;
import org.openapitools.client.model.LoopTPDTKTREQ;
import org.openapitools.client.model.MON;
import org.openapitools.client.model.MSG;
import org.openapitools.client.model.ODI;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.PTS;
import org.openapitools.client.model.RCI;
import org.openapitools.client.model.TAI;
import org.openapitools.client.model.TIF;
import org.openapitools.client.model.TVL;
import org.openapitools.client.model.TXD;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop3TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop3TKTREQ {
  public static final String SERIALIZED_NAME_T_I_F = "TIF";
  @SerializedName(SERIALIZED_NAME_T_I_F)
  private TIF tif;

  public static final String SERIALIZED_NAME_M_S_G = "MSG";
  @SerializedName(SERIALIZED_NAME_M_S_G)
  private MSG msg;

  public static final String SERIALIZED_NAME_T_A_I = "TAI";
  @SerializedName(SERIALIZED_NAME_T_A_I)
  private TAI tai;

  public static final String SERIALIZED_NAME_R_C_I = "RCI";
  @SerializedName(SERIALIZED_NAME_R_C_I)
  private RCI rci;

  public static final String SERIALIZED_NAME_M_O_N = "MON";
  @SerializedName(SERIALIZED_NAME_M_O_N)
  private MON mon;

  public static final String SERIALIZED_NAME_F_O_P = "FOP";
  @SerializedName(SERIALIZED_NAME_F_O_P)
  private FOP fop;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_O_D_I = "ODI";
  @SerializedName(SERIALIZED_NAME_O_D_I)
  private ODI odi;

  public static final String SERIALIZED_NAME_T_V_L = "TVL";
  @SerializedName(SERIALIZED_NAME_T_V_L)
  private TVL tvl;

  public static final String SERIALIZED_NAME_F_T_I = "FTI";
  @SerializedName(SERIALIZED_NAME_F_T_I)
  private FTI fti;

  public static final String SERIALIZED_NAME_A_T_I = "ATI";
  @SerializedName(SERIALIZED_NAME_A_T_I)
  private ATI ati;

  public static final String SERIALIZED_NAME_E_Q_N = "EQN";
  @SerializedName(SERIALIZED_NAME_E_Q_N)
  private EQN eqn;

  public static final String SERIALIZED_NAME_T_X_D = "TXD";
  @SerializedName(SERIALIZED_NAME_T_X_D)
  private List<TXD> TXD;

  public static final String SERIALIZED_NAME_D_I_D = "DID";
  @SerializedName(SERIALIZED_NAME_D_I_D)
  private List<DID> DID;

  public static final String SERIALIZED_NAME_I_F_T = "IFT";
  @SerializedName(SERIALIZED_NAME_I_F_T)
  private List<IFT> IFT;

  public static final String SERIALIZED_NAME_C_R_I = "CRI";
  @SerializedName(SERIALIZED_NAME_C_R_I)
  private CRI cri;

  public static final String SERIALIZED_NAME_F_A_R = "FAR";
  @SerializedName(SERIALIZED_NAME_F_A_R)
  private FAR far;

  public static final String SERIALIZED_NAME_F_Q_U = "FQU";
  @SerializedName(SERIALIZED_NAME_F_Q_U)
  private FQU fqu;

  public static final String SERIALIZED_NAME_P_T_S = "PTS";
  @SerializedName(SERIALIZED_NAME_P_T_S)
  private PTS pts;

  public static final String SERIALIZED_NAME_LOOP4 = "Loop4";
  @SerializedName(SERIALIZED_NAME_LOOP4)
  private List<Loop4TKTREQ> loop4;

  public static final String SERIALIZED_NAME_LOOP6 = "Loop6";
  @SerializedName(SERIALIZED_NAME_LOOP6)
  private List<Loop6TKTREQ> loop6;

  public static final String SERIALIZED_NAME_LOOP10 = "Loop10";
  @SerializedName(SERIALIZED_NAME_LOOP10)
  private List<Loop10TKTREQ> loop10;

  public static final String SERIALIZED_NAME_LOOP_T_P_D = "LoopTPD";
  @SerializedName(SERIALIZED_NAME_LOOP_T_P_D)
  private LoopTPDTKTREQ loopTPD;

  public static final String SERIALIZED_NAME_LOOP_A_B_I = "LoopABI";
  @SerializedName(SERIALIZED_NAME_LOOP_A_B_I)
  private LoopABITKTREQ loopABI;

  public static final String SERIALIZED_NAME_LOOP13 = "Loop13";
  @SerializedName(SERIALIZED_NAME_LOOP13)
  private List<Loop13TKTREQ> loop13;

  public static final String SERIALIZED_NAME_LOOP_P_R_T = "LoopPRT";
  @SerializedName(SERIALIZED_NAME_LOOP_P_R_T)
  private LoopPRTTKTREQ loopPRT;

  public static final String SERIALIZED_NAME_LOOP_R_E_F = "LoopREF";
  @SerializedName(SERIALIZED_NAME_LOOP_R_E_F)
  private LoopREFTKTREQ loopREF;

  public Loop3TKTREQ() {
  }

  public Loop3TKTREQ tif(TIF tif) {
    
    this.tif = tif;
    return this;
  }

   /**
   * Get tif
   * @return tif
  **/
  @javax.annotation.Nonnull

  public TIF getTIF() {
    return tif;
  }


  public void setTIF(TIF tif) {
    this.tif = tif;
  }


  public Loop3TKTREQ msg(MSG msg) {
    
    this.msg = msg;
    return this;
  }

   /**
   * Get msg
   * @return msg
  **/
  @javax.annotation.Nullable

  public MSG getMSG() {
    return msg;
  }


  public void setMSG(MSG msg) {
    this.msg = msg;
  }


  public Loop3TKTREQ tai(TAI tai) {
    
    this.tai = tai;
    return this;
  }

   /**
   * Get tai
   * @return tai
  **/
  @javax.annotation.Nullable

  public TAI getTAI() {
    return tai;
  }


  public void setTAI(TAI tai) {
    this.tai = tai;
  }


  public Loop3TKTREQ rci(RCI rci) {
    
    this.rci = rci;
    return this;
  }

   /**
   * Get rci
   * @return rci
  **/
  @javax.annotation.Nullable

  public RCI getRCI() {
    return rci;
  }


  public void setRCI(RCI rci) {
    this.rci = rci;
  }


  public Loop3TKTREQ mon(MON mon) {
    
    this.mon = mon;
    return this;
  }

   /**
   * Get mon
   * @return mon
  **/
  @javax.annotation.Nullable

  public MON getMON() {
    return mon;
  }


  public void setMON(MON mon) {
    this.mon = mon;
  }


  public Loop3TKTREQ fop(FOP fop) {
    
    this.fop = fop;
    return this;
  }

   /**
   * Get fop
   * @return fop
  **/
  @javax.annotation.Nullable

  public FOP getFOP() {
    return fop;
  }


  public void setFOP(FOP fop) {
    this.fop = fop;
  }


  public Loop3TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nullable

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop3TKTREQ odi(ODI odi) {
    
    this.odi = odi;
    return this;
  }

   /**
   * Get odi
   * @return odi
  **/
  @javax.annotation.Nullable

  public ODI getODI() {
    return odi;
  }


  public void setODI(ODI odi) {
    this.odi = odi;
  }


  public Loop3TKTREQ tvl(TVL tvl) {
    
    this.tvl = tvl;
    return this;
  }

   /**
   * Get tvl
   * @return tvl
  **/
  @javax.annotation.Nullable

  public TVL getTVL() {
    return tvl;
  }


  public void setTVL(TVL tvl) {
    this.tvl = tvl;
  }


  public Loop3TKTREQ fti(FTI fti) {
    
    this.fti = fti;
    return this;
  }

   /**
   * Get fti
   * @return fti
  **/
  @javax.annotation.Nullable

  public FTI getFTI() {
    return fti;
  }


  public void setFTI(FTI fti) {
    this.fti = fti;
  }


  public Loop3TKTREQ ati(ATI ati) {
    
    this.ati = ati;
    return this;
  }

   /**
   * Get ati
   * @return ati
  **/
  @javax.annotation.Nullable

  public ATI getATI() {
    return ati;
  }


  public void setATI(ATI ati) {
    this.ati = ati;
  }


  public Loop3TKTREQ eqn(EQN eqn) {
    
    this.eqn = eqn;
    return this;
  }

   /**
   * Get eqn
   * @return eqn
  **/
  @javax.annotation.Nullable

  public EQN getEQN() {
    return eqn;
  }


  public void setEQN(EQN eqn) {
    this.eqn = eqn;
  }


  public Loop3TKTREQ TXD(List<TXD> TXD) {
    
    this.TXD = TXD;
    return this;
  }

  public Loop3TKTREQ addTXDItem(TXD TXDItem) {
    if (this.TXD == null) {
      this.TXD = new ArrayList<>();
    }
    this.TXD.add(TXDItem);
    return this;
  }

   /**
   * Get TXD
   * @return TXD
  **/
  @javax.annotation.Nullable

  public List<TXD> getTXD() {
    return TXD;
  }


  public void setTXD(List<TXD> TXD) {
    this.TXD = TXD;
  }


  public Loop3TKTREQ DID(List<DID> DID) {
    
    this.DID = DID;
    return this;
  }

  public Loop3TKTREQ addDIDItem(DID DIDItem) {
    if (this.DID == null) {
      this.DID = new ArrayList<>();
    }
    this.DID.add(DIDItem);
    return this;
  }

   /**
   * Get DID
   * @return DID
  **/
  @javax.annotation.Nullable

  public List<DID> getDID() {
    return DID;
  }


  public void setDID(List<DID> DID) {
    this.DID = DID;
  }


  public Loop3TKTREQ IFT(List<IFT> IFT) {
    
    this.IFT = IFT;
    return this;
  }

  public Loop3TKTREQ addIFTItem(IFT IFTItem) {
    if (this.IFT == null) {
      this.IFT = new ArrayList<>();
    }
    this.IFT.add(IFTItem);
    return this;
  }

   /**
   * Get IFT
   * @return IFT
  **/
  @javax.annotation.Nullable

  public List<IFT> getIFT() {
    return IFT;
  }


  public void setIFT(List<IFT> IFT) {
    this.IFT = IFT;
  }


  public Loop3TKTREQ cri(CRI cri) {
    
    this.cri = cri;
    return this;
  }

   /**
   * Get cri
   * @return cri
  **/
  @javax.annotation.Nullable

  public CRI getCRI() {
    return cri;
  }


  public void setCRI(CRI cri) {
    this.cri = cri;
  }


  public Loop3TKTREQ far(FAR far) {
    
    this.far = far;
    return this;
  }

   /**
   * Get far
   * @return far
  **/
  @javax.annotation.Nullable

  public FAR getFAR() {
    return far;
  }


  public void setFAR(FAR far) {
    this.far = far;
  }


  public Loop3TKTREQ fqu(FQU fqu) {
    
    this.fqu = fqu;
    return this;
  }

   /**
   * Get fqu
   * @return fqu
  **/
  @javax.annotation.Nullable

  public FQU getFQU() {
    return fqu;
  }


  public void setFQU(FQU fqu) {
    this.fqu = fqu;
  }


  public Loop3TKTREQ pts(PTS pts) {
    
    this.pts = pts;
    return this;
  }

   /**
   * Get pts
   * @return pts
  **/
  @javax.annotation.Nullable

  public PTS getPTS() {
    return pts;
  }


  public void setPTS(PTS pts) {
    this.pts = pts;
  }


  public Loop3TKTREQ loop4(List<Loop4TKTREQ> loop4) {
    
    this.loop4 = loop4;
    return this;
  }

  public Loop3TKTREQ addLoop4Item(Loop4TKTREQ loop4Item) {
    if (this.loop4 == null) {
      this.loop4 = new ArrayList<>();
    }
    this.loop4.add(loop4Item);
    return this;
  }

   /**
   * Get loop4
   * @return loop4
  **/
  @javax.annotation.Nullable

  public List<Loop4TKTREQ> getLoop4() {
    return loop4;
  }


  public void setLoop4(List<Loop4TKTREQ> loop4) {
    this.loop4 = loop4;
  }


  public Loop3TKTREQ loop6(List<Loop6TKTREQ> loop6) {
    
    this.loop6 = loop6;
    return this;
  }

  public Loop3TKTREQ addLoop6Item(Loop6TKTREQ loop6Item) {
    if (this.loop6 == null) {
      this.loop6 = new ArrayList<>();
    }
    this.loop6.add(loop6Item);
    return this;
  }

   /**
   * Get loop6
   * @return loop6
  **/
  @javax.annotation.Nullable

  public List<Loop6TKTREQ> getLoop6() {
    return loop6;
  }


  public void setLoop6(List<Loop6TKTREQ> loop6) {
    this.loop6 = loop6;
  }


  public Loop3TKTREQ loop10(List<Loop10TKTREQ> loop10) {
    
    this.loop10 = loop10;
    return this;
  }

  public Loop3TKTREQ addLoop10Item(Loop10TKTREQ loop10Item) {
    if (this.loop10 == null) {
      this.loop10 = new ArrayList<>();
    }
    this.loop10.add(loop10Item);
    return this;
  }

   /**
   * Get loop10
   * @return loop10
  **/
  @javax.annotation.Nullable

  public List<Loop10TKTREQ> getLoop10() {
    return loop10;
  }


  public void setLoop10(List<Loop10TKTREQ> loop10) {
    this.loop10 = loop10;
  }


  public Loop3TKTREQ loopTPD(LoopTPDTKTREQ loopTPD) {
    
    this.loopTPD = loopTPD;
    return this;
  }

   /**
   * Get loopTPD
   * @return loopTPD
  **/
  @javax.annotation.Nullable

  public LoopTPDTKTREQ getLoopTPD() {
    return loopTPD;
  }


  public void setLoopTPD(LoopTPDTKTREQ loopTPD) {
    this.loopTPD = loopTPD;
  }


  public Loop3TKTREQ loopABI(LoopABITKTREQ loopABI) {
    
    this.loopABI = loopABI;
    return this;
  }

   /**
   * Get loopABI
   * @return loopABI
  **/
  @javax.annotation.Nullable

  public LoopABITKTREQ getLoopABI() {
    return loopABI;
  }


  public void setLoopABI(LoopABITKTREQ loopABI) {
    this.loopABI = loopABI;
  }


  public Loop3TKTREQ loop13(List<Loop13TKTREQ> loop13) {
    
    this.loop13 = loop13;
    return this;
  }

  public Loop3TKTREQ addLoop13Item(Loop13TKTREQ loop13Item) {
    if (this.loop13 == null) {
      this.loop13 = new ArrayList<>();
    }
    this.loop13.add(loop13Item);
    return this;
  }

   /**
   * Get loop13
   * @return loop13
  **/
  @javax.annotation.Nullable

  public List<Loop13TKTREQ> getLoop13() {
    return loop13;
  }


  public void setLoop13(List<Loop13TKTREQ> loop13) {
    this.loop13 = loop13;
  }


  public Loop3TKTREQ loopPRT(LoopPRTTKTREQ loopPRT) {
    
    this.loopPRT = loopPRT;
    return this;
  }

   /**
   * Get loopPRT
   * @return loopPRT
  **/
  @javax.annotation.Nullable

  public LoopPRTTKTREQ getLoopPRT() {
    return loopPRT;
  }


  public void setLoopPRT(LoopPRTTKTREQ loopPRT) {
    this.loopPRT = loopPRT;
  }


  public Loop3TKTREQ loopREF(LoopREFTKTREQ loopREF) {
    
    this.loopREF = loopREF;
    return this;
  }

   /**
   * Get loopREF
   * @return loopREF
  **/
  @javax.annotation.Nullable

  public LoopREFTKTREQ getLoopREF() {
    return loopREF;
  }


  public void setLoopREF(LoopREFTKTREQ loopREF) {
    this.loopREF = loopREF;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop3TKTREQ loop3TKTREQ = (Loop3TKTREQ) o;
    return Objects.equals(this.tif, loop3TKTREQ.tif) &&
        Objects.equals(this.msg, loop3TKTREQ.msg) &&
        Objects.equals(this.tai, loop3TKTREQ.tai) &&
        Objects.equals(this.rci, loop3TKTREQ.rci) &&
        Objects.equals(this.mon, loop3TKTREQ.mon) &&
        Objects.equals(this.fop, loop3TKTREQ.fop) &&
        Objects.equals(this.ptk, loop3TKTREQ.ptk) &&
        Objects.equals(this.odi, loop3TKTREQ.odi) &&
        Objects.equals(this.tvl, loop3TKTREQ.tvl) &&
        Objects.equals(this.fti, loop3TKTREQ.fti) &&
        Objects.equals(this.ati, loop3TKTREQ.ati) &&
        Objects.equals(this.eqn, loop3TKTREQ.eqn) &&
        Objects.equals(this.TXD, loop3TKTREQ.TXD) &&
        Objects.equals(this.DID, loop3TKTREQ.DID) &&
        Objects.equals(this.IFT, loop3TKTREQ.IFT) &&
        Objects.equals(this.cri, loop3TKTREQ.cri) &&
        Objects.equals(this.far, loop3TKTREQ.far) &&
        Objects.equals(this.fqu, loop3TKTREQ.fqu) &&
        Objects.equals(this.pts, loop3TKTREQ.pts) &&
        Objects.equals(this.loop4, loop3TKTREQ.loop4) &&
        Objects.equals(this.loop6, loop3TKTREQ.loop6) &&
        Objects.equals(this.loop10, loop3TKTREQ.loop10) &&
        Objects.equals(this.loopTPD, loop3TKTREQ.loopTPD) &&
        Objects.equals(this.loopABI, loop3TKTREQ.loopABI) &&
        Objects.equals(this.loop13, loop3TKTREQ.loop13) &&
        Objects.equals(this.loopPRT, loop3TKTREQ.loopPRT) &&
        Objects.equals(this.loopREF, loop3TKTREQ.loopREF);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tif, msg, tai, rci, mon, fop, ptk, odi, tvl, fti, ati, eqn, TXD, DID, IFT, cri, far, fqu, pts, loop4, loop6, loop10, loopTPD, loopABI, loop13, loopPRT, loopREF);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop3TKTREQ {\n");
    sb.append("    tif: ").append(toIndentedString(tif)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    tai: ").append(toIndentedString(tai)).append("\n");
    sb.append("    rci: ").append(toIndentedString(rci)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    fop: ").append(toIndentedString(fop)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    odi: ").append(toIndentedString(odi)).append("\n");
    sb.append("    tvl: ").append(toIndentedString(tvl)).append("\n");
    sb.append("    fti: ").append(toIndentedString(fti)).append("\n");
    sb.append("    ati: ").append(toIndentedString(ati)).append("\n");
    sb.append("    eqn: ").append(toIndentedString(eqn)).append("\n");
    sb.append("    TXD: ").append(toIndentedString(TXD)).append("\n");
    sb.append("    DID: ").append(toIndentedString(DID)).append("\n");
    sb.append("    IFT: ").append(toIndentedString(IFT)).append("\n");
    sb.append("    cri: ").append(toIndentedString(cri)).append("\n");
    sb.append("    far: ").append(toIndentedString(far)).append("\n");
    sb.append("    fqu: ").append(toIndentedString(fqu)).append("\n");
    sb.append("    pts: ").append(toIndentedString(pts)).append("\n");
    sb.append("    loop4: ").append(toIndentedString(loop4)).append("\n");
    sb.append("    loop6: ").append(toIndentedString(loop6)).append("\n");
    sb.append("    loop10: ").append(toIndentedString(loop10)).append("\n");
    sb.append("    loopTPD: ").append(toIndentedString(loopTPD)).append("\n");
    sb.append("    loopABI: ").append(toIndentedString(loopABI)).append("\n");
    sb.append("    loop13: ").append(toIndentedString(loop13)).append("\n");
    sb.append("    loopPRT: ").append(toIndentedString(loopPRT)).append("\n");
    sb.append("    loopREF: ").append(toIndentedString(loopREF)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TIF");
    openapiFields.add("MSG");
    openapiFields.add("TAI");
    openapiFields.add("RCI");
    openapiFields.add("MON");
    openapiFields.add("FOP");
    openapiFields.add("PTK");
    openapiFields.add("ODI");
    openapiFields.add("TVL");
    openapiFields.add("FTI");
    openapiFields.add("ATI");
    openapiFields.add("EQN");
    openapiFields.add("TXD");
    openapiFields.add("DID");
    openapiFields.add("IFT");
    openapiFields.add("CRI");
    openapiFields.add("FAR");
    openapiFields.add("FQU");
    openapiFields.add("PTS");
    openapiFields.add("Loop4");
    openapiFields.add("Loop6");
    openapiFields.add("Loop10");
    openapiFields.add("LoopTPD");
    openapiFields.add("LoopABI");
    openapiFields.add("Loop13");
    openapiFields.add("LoopPRT");
    openapiFields.add("LoopREF");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TIF");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop3TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop3TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop3TKTREQ is not found in the empty JSON string", Loop3TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop3TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop3TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop3TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `TIF`
      TIF.validateJsonObject(jsonObj.getAsJsonObject("TIF"));
      // validate the optional field `MSG`
      if (jsonObj.get("MSG") != null && !jsonObj.get("MSG").isJsonNull()) {
        MSG.validateJsonObject(jsonObj.getAsJsonObject("MSG"));
      }
      // validate the optional field `TAI`
      if (jsonObj.get("TAI") != null && !jsonObj.get("TAI").isJsonNull()) {
        TAI.validateJsonObject(jsonObj.getAsJsonObject("TAI"));
      }
      // validate the optional field `RCI`
      if (jsonObj.get("RCI") != null && !jsonObj.get("RCI").isJsonNull()) {
        RCI.validateJsonObject(jsonObj.getAsJsonObject("RCI"));
      }
      // validate the optional field `MON`
      if (jsonObj.get("MON") != null && !jsonObj.get("MON").isJsonNull()) {
        MON.validateJsonObject(jsonObj.getAsJsonObject("MON"));
      }
      // validate the optional field `FOP`
      if (jsonObj.get("FOP") != null && !jsonObj.get("FOP").isJsonNull()) {
        FOP.validateJsonObject(jsonObj.getAsJsonObject("FOP"));
      }
      // validate the optional field `PTK`
      if (jsonObj.get("PTK") != null && !jsonObj.get("PTK").isJsonNull()) {
        PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      }
      // validate the optional field `ODI`
      if (jsonObj.get("ODI") != null && !jsonObj.get("ODI").isJsonNull()) {
        ODI.validateJsonObject(jsonObj.getAsJsonObject("ODI"));
      }
      // validate the optional field `TVL`
      if (jsonObj.get("TVL") != null && !jsonObj.get("TVL").isJsonNull()) {
        TVL.validateJsonObject(jsonObj.getAsJsonObject("TVL"));
      }
      // validate the optional field `FTI`
      if (jsonObj.get("FTI") != null && !jsonObj.get("FTI").isJsonNull()) {
        FTI.validateJsonObject(jsonObj.getAsJsonObject("FTI"));
      }
      // validate the optional field `ATI`
      if (jsonObj.get("ATI") != null && !jsonObj.get("ATI").isJsonNull()) {
        ATI.validateJsonObject(jsonObj.getAsJsonObject("ATI"));
      }
      // validate the optional field `EQN`
      if (jsonObj.get("EQN") != null && !jsonObj.get("EQN").isJsonNull()) {
        EQN.validateJsonObject(jsonObj.getAsJsonObject("EQN"));
      }
      if (jsonObj.get("TXD") != null && !jsonObj.get("TXD").isJsonNull()) {
        JsonArray jsonArrayTXD = jsonObj.getAsJsonArray("TXD");
        if (jsonArrayTXD != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TXD").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TXD` to be an array in the JSON string but got `%s`", jsonObj.get("TXD").toString()));
          }

          // validate the optional field `TXD` (array)
          for (int i = 0; i < jsonArrayTXD.size(); i++) {
            TXD.validateJsonObject(jsonArrayTXD.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("DID") != null && !jsonObj.get("DID").isJsonNull()) {
        JsonArray jsonArrayDID = jsonObj.getAsJsonArray("DID");
        if (jsonArrayDID != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DID").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DID` to be an array in the JSON string but got `%s`", jsonObj.get("DID").toString()));
          }

          // validate the optional field `DID` (array)
          for (int i = 0; i < jsonArrayDID.size(); i++) {
            DID.validateJsonObject(jsonArrayDID.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("IFT") != null && !jsonObj.get("IFT").isJsonNull()) {
        JsonArray jsonArrayIFT = jsonObj.getAsJsonArray("IFT");
        if (jsonArrayIFT != null) {
          // ensure the json data is an array
          if (!jsonObj.get("IFT").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `IFT` to be an array in the JSON string but got `%s`", jsonObj.get("IFT").toString()));
          }

          // validate the optional field `IFT` (array)
          for (int i = 0; i < jsonArrayIFT.size(); i++) {
            IFT.validateJsonObject(jsonArrayIFT.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `CRI`
      if (jsonObj.get("CRI") != null && !jsonObj.get("CRI").isJsonNull()) {
        CRI.validateJsonObject(jsonObj.getAsJsonObject("CRI"));
      }
      // validate the optional field `FAR`
      if (jsonObj.get("FAR") != null && !jsonObj.get("FAR").isJsonNull()) {
        FAR.validateJsonObject(jsonObj.getAsJsonObject("FAR"));
      }
      // validate the optional field `FQU`
      if (jsonObj.get("FQU") != null && !jsonObj.get("FQU").isJsonNull()) {
        FQU.validateJsonObject(jsonObj.getAsJsonObject("FQU"));
      }
      // validate the optional field `PTS`
      if (jsonObj.get("PTS") != null && !jsonObj.get("PTS").isJsonNull()) {
        PTS.validateJsonObject(jsonObj.getAsJsonObject("PTS"));
      }
      if (jsonObj.get("Loop4") != null && !jsonObj.get("Loop4").isJsonNull()) {
        JsonArray jsonArrayloop4 = jsonObj.getAsJsonArray("Loop4");
        if (jsonArrayloop4 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop4").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop4` to be an array in the JSON string but got `%s`", jsonObj.get("Loop4").toString()));
          }

          // validate the optional field `Loop4` (array)
          for (int i = 0; i < jsonArrayloop4.size(); i++) {
            Loop4TKTREQ.validateJsonObject(jsonArrayloop4.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Loop6") != null && !jsonObj.get("Loop6").isJsonNull()) {
        JsonArray jsonArrayloop6 = jsonObj.getAsJsonArray("Loop6");
        if (jsonArrayloop6 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop6").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop6` to be an array in the JSON string but got `%s`", jsonObj.get("Loop6").toString()));
          }

          // validate the optional field `Loop6` (array)
          for (int i = 0; i < jsonArrayloop6.size(); i++) {
            Loop6TKTREQ.validateJsonObject(jsonArrayloop6.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Loop10") != null && !jsonObj.get("Loop10").isJsonNull()) {
        JsonArray jsonArrayloop10 = jsonObj.getAsJsonArray("Loop10");
        if (jsonArrayloop10 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop10").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop10` to be an array in the JSON string but got `%s`", jsonObj.get("Loop10").toString()));
          }

          // validate the optional field `Loop10` (array)
          for (int i = 0; i < jsonArrayloop10.size(); i++) {
            Loop10TKTREQ.validateJsonObject(jsonArrayloop10.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `LoopTPD`
      if (jsonObj.get("LoopTPD") != null && !jsonObj.get("LoopTPD").isJsonNull()) {
        LoopTPDTKTREQ.validateJsonObject(jsonObj.getAsJsonObject("LoopTPD"));
      }
      // validate the optional field `LoopABI`
      if (jsonObj.get("LoopABI") != null && !jsonObj.get("LoopABI").isJsonNull()) {
        LoopABITKTREQ.validateJsonObject(jsonObj.getAsJsonObject("LoopABI"));
      }
      if (jsonObj.get("Loop13") != null && !jsonObj.get("Loop13").isJsonNull()) {
        JsonArray jsonArrayloop13 = jsonObj.getAsJsonArray("Loop13");
        if (jsonArrayloop13 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop13").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop13` to be an array in the JSON string but got `%s`", jsonObj.get("Loop13").toString()));
          }

          // validate the optional field `Loop13` (array)
          for (int i = 0; i < jsonArrayloop13.size(); i++) {
            Loop13TKTREQ.validateJsonObject(jsonArrayloop13.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `LoopPRT`
      if (jsonObj.get("LoopPRT") != null && !jsonObj.get("LoopPRT").isJsonNull()) {
        LoopPRTTKTREQ.validateJsonObject(jsonObj.getAsJsonObject("LoopPRT"));
      }
      // validate the optional field `LoopREF`
      if (jsonObj.get("LoopREF") != null && !jsonObj.get("LoopREF").isJsonNull()) {
        LoopREFTKTREQ.validateJsonObject(jsonObj.getAsJsonObject("LoopREF"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop3TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop3TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop3TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop3TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop3TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop3TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop3TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop3TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop3TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop3TKTREQ
  */
  public static Loop3TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop3TKTREQ.class);
  }

 /**
  * Convert an instance of Loop3TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

