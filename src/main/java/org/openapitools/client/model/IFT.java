/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.C346;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IFT
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class IFT {
  public static final String SERIALIZED_NAME_C34601 = "C346_01";
  @SerializedName(SERIALIZED_NAME_C34601)
  private C346 C346_01;

  public static final String SERIALIZED_NAME_FREE_TEXT02 = "FreeText_02";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT02)
  private List<String> freeText02;

  public IFT() {
  }

  public IFT C346_01(C346 C346_01) {
    
    this.C346_01 = C346_01;
    return this;
  }

   /**
   * Get C346_01
   * @return C346_01
  **/
  @javax.annotation.Nullable

  public C346 getC34601() {
    return C346_01;
  }


  public void setC34601(C346 C346_01) {
    this.C346_01 = C346_01;
  }


  public IFT freeText02(List<String> freeText02) {
    
    this.freeText02 = freeText02;
    return this;
  }

  public IFT addFreeText02Item(String freeText02Item) {
    if (this.freeText02 == null) {
      this.freeText02 = new ArrayList<>();
    }
    this.freeText02.add(freeText02Item);
    return this;
  }

   /**
   * Get freeText02
   * @return freeText02
  **/
  @javax.annotation.Nullable

  public List<String> getFreeText02() {
    return freeText02;
  }


  public void setFreeText02(List<String> freeText02) {
    this.freeText02 = freeText02;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IFT IFT = (IFT) o;
    return Objects.equals(this.C346_01, IFT.C346_01) &&
        Objects.equals(this.freeText02, IFT.freeText02);
  }

  @Override
  public int hashCode() {
    return Objects.hash(C346_01, freeText02);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IFT {\n");
    sb.append("    C346_01: ").append(toIndentedString(C346_01)).append("\n");
    sb.append("    freeText02: ").append(toIndentedString(freeText02)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("C346_01");
    openapiFields.add("FreeText_02");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IFT
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IFT.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IFT is not found in the empty JSON string", IFT.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!IFT.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IFT` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `C346_01`
      if (jsonObj.get("C346_01") != null && !jsonObj.get("C346_01").isJsonNull()) {
        C346.validateJsonObject(jsonObj.getAsJsonObject("C346_01"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("FreeText_02") != null && !jsonObj.get("FreeText_02").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `FreeText_02` to be an array in the JSON string but got `%s`", jsonObj.get("FreeText_02").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IFT.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IFT' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IFT> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IFT.class));

       return (TypeAdapter<T>) new TypeAdapter<IFT>() {
           @Override
           public void write(JsonWriter out, IFT value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IFT read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IFT given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IFT
  * @throws IOException if the JSON string is invalid with respect to IFT
  */
  public static IFT fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IFT.class);
  }

 /**
  * Convert an instance of IFT to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

