/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID1050;
import org.openapitools.client.model.EDIFACTID1153;
import org.openapitools.client.model.EDIFACTID1225;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C672
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C672 {
  public static final String SERIALIZED_NAME_MESSAGE_FUNCTION01 = "MessageFunction_01";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FUNCTION01)
  private EDIFACTID1225 messageFunction01;

  public static final String SERIALIZED_NAME_REFERENCE_QUALIFIER02 = "ReferenceQualifier_02";
  @SerializedName(SERIALIZED_NAME_REFERENCE_QUALIFIER02)
  private EDIFACTID1153 referenceQualifier02;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER03 = "SequenceNumber_03";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER03)
  private EDIFACTID1050 sequenceNumber03;

  public C672() {
  }

  public C672 messageFunction01(EDIFACTID1225 messageFunction01) {
    
    this.messageFunction01 = messageFunction01;
    return this;
  }

   /**
   * Get messageFunction01
   * @return messageFunction01
  **/
  @javax.annotation.Nullable

  public EDIFACTID1225 getMessageFunction01() {
    return messageFunction01;
  }


  public void setMessageFunction01(EDIFACTID1225 messageFunction01) {
    this.messageFunction01 = messageFunction01;
  }


  public C672 referenceQualifier02(EDIFACTID1153 referenceQualifier02) {
    
    this.referenceQualifier02 = referenceQualifier02;
    return this;
  }

   /**
   * Get referenceQualifier02
   * @return referenceQualifier02
  **/
  @javax.annotation.Nullable

  public EDIFACTID1153 getReferenceQualifier02() {
    return referenceQualifier02;
  }


  public void setReferenceQualifier02(EDIFACTID1153 referenceQualifier02) {
    this.referenceQualifier02 = referenceQualifier02;
  }


  public C672 sequenceNumber03(EDIFACTID1050 sequenceNumber03) {
    
    this.sequenceNumber03 = sequenceNumber03;
    return this;
  }

   /**
   * Get sequenceNumber03
   * @return sequenceNumber03
  **/
  @javax.annotation.Nullable

  public EDIFACTID1050 getSequenceNumber03() {
    return sequenceNumber03;
  }


  public void setSequenceNumber03(EDIFACTID1050 sequenceNumber03) {
    this.sequenceNumber03 = sequenceNumber03;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C672 C672 = (C672) o;
    return Objects.equals(this.messageFunction01, C672.messageFunction01) &&
        Objects.equals(this.referenceQualifier02, C672.referenceQualifier02) &&
        Objects.equals(this.sequenceNumber03, C672.sequenceNumber03);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageFunction01, referenceQualifier02, sequenceNumber03);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C672 {\n");
    sb.append("    messageFunction01: ").append(toIndentedString(messageFunction01)).append("\n");
    sb.append("    referenceQualifier02: ").append(toIndentedString(referenceQualifier02)).append("\n");
    sb.append("    sequenceNumber03: ").append(toIndentedString(sequenceNumber03)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MessageFunction_01");
    openapiFields.add("ReferenceQualifier_02");
    openapiFields.add("SequenceNumber_03");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C672
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C672.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C672 is not found in the empty JSON string", C672.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C672.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C672` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C672.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C672' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C672> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C672.class));

       return (TypeAdapter<T>) new TypeAdapter<C672>() {
           @Override
           public void write(JsonWriter out, C672 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C672 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C672 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C672
  * @throws IOException if the JSON string is invalid with respect to C672
  */
  public static C672 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C672.class);
  }

 /**
  * Convert an instance of C672 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

