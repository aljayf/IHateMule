/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.CVR;
import org.openapitools.client.model.FCI;
import org.openapitools.client.model.Loop7TKTREQ;
import org.openapitools.client.model.MON;
import org.openapitools.client.model.TXD;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop6TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop6TKTREQ {
  public static final String SERIALIZED_NAME_F_C_I = "FCI";
  @SerializedName(SERIALIZED_NAME_F_C_I)
  private FCI fci;

  public static final String SERIALIZED_NAME_LOOP7 = "Loop7";
  @SerializedName(SERIALIZED_NAME_LOOP7)
  private List<Loop7TKTREQ> loop7;

  public static final String SERIALIZED_NAME_M_O_N = "MON";
  @SerializedName(SERIALIZED_NAME_M_O_N)
  private MON mon;

  public static final String SERIALIZED_NAME_T_X_D = "TXD";
  @SerializedName(SERIALIZED_NAME_T_X_D)
  private List<TXD> TXD;

  public static final String SERIALIZED_NAME_C_V_R = "CVR";
  @SerializedName(SERIALIZED_NAME_C_V_R)
  private CVR cvr;

  public Loop6TKTREQ() {
  }

  public Loop6TKTREQ fci(FCI fci) {
    
    this.fci = fci;
    return this;
  }

   /**
   * Get fci
   * @return fci
  **/
  @javax.annotation.Nonnull

  public FCI getFCI() {
    return fci;
  }


  public void setFCI(FCI fci) {
    this.fci = fci;
  }


  public Loop6TKTREQ loop7(List<Loop7TKTREQ> loop7) {
    
    this.loop7 = loop7;
    return this;
  }

  public Loop6TKTREQ addLoop7Item(Loop7TKTREQ loop7Item) {
    if (this.loop7 == null) {
      this.loop7 = new ArrayList<>();
    }
    this.loop7.add(loop7Item);
    return this;
  }

   /**
   * Get loop7
   * @return loop7
  **/
  @javax.annotation.Nullable

  public List<Loop7TKTREQ> getLoop7() {
    return loop7;
  }


  public void setLoop7(List<Loop7TKTREQ> loop7) {
    this.loop7 = loop7;
  }


  public Loop6TKTREQ mon(MON mon) {
    
    this.mon = mon;
    return this;
  }

   /**
   * Get mon
   * @return mon
  **/
  @javax.annotation.Nullable

  public MON getMON() {
    return mon;
  }


  public void setMON(MON mon) {
    this.mon = mon;
  }


  public Loop6TKTREQ TXD(List<TXD> TXD) {
    
    this.TXD = TXD;
    return this;
  }

  public Loop6TKTREQ addTXDItem(TXD TXDItem) {
    if (this.TXD == null) {
      this.TXD = new ArrayList<>();
    }
    this.TXD.add(TXDItem);
    return this;
  }

   /**
   * Get TXD
   * @return TXD
  **/
  @javax.annotation.Nullable

  public List<TXD> getTXD() {
    return TXD;
  }


  public void setTXD(List<TXD> TXD) {
    this.TXD = TXD;
  }


  public Loop6TKTREQ cvr(CVR cvr) {
    
    this.cvr = cvr;
    return this;
  }

   /**
   * Get cvr
   * @return cvr
  **/
  @javax.annotation.Nullable

  public CVR getCVR() {
    return cvr;
  }


  public void setCVR(CVR cvr) {
    this.cvr = cvr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop6TKTREQ loop6TKTREQ = (Loop6TKTREQ) o;
    return Objects.equals(this.fci, loop6TKTREQ.fci) &&
        Objects.equals(this.loop7, loop6TKTREQ.loop7) &&
        Objects.equals(this.mon, loop6TKTREQ.mon) &&
        Objects.equals(this.TXD, loop6TKTREQ.TXD) &&
        Objects.equals(this.cvr, loop6TKTREQ.cvr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fci, loop7, mon, TXD, cvr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop6TKTREQ {\n");
    sb.append("    fci: ").append(toIndentedString(fci)).append("\n");
    sb.append("    loop7: ").append(toIndentedString(loop7)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    TXD: ").append(toIndentedString(TXD)).append("\n");
    sb.append("    cvr: ").append(toIndentedString(cvr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FCI");
    openapiFields.add("Loop7");
    openapiFields.add("MON");
    openapiFields.add("TXD");
    openapiFields.add("CVR");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FCI");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop6TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop6TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop6TKTREQ is not found in the empty JSON string", Loop6TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop6TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop6TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop6TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `FCI`
      FCI.validateJsonObject(jsonObj.getAsJsonObject("FCI"));
      if (jsonObj.get("Loop7") != null && !jsonObj.get("Loop7").isJsonNull()) {
        JsonArray jsonArrayloop7 = jsonObj.getAsJsonArray("Loop7");
        if (jsonArrayloop7 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop7").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop7` to be an array in the JSON string but got `%s`", jsonObj.get("Loop7").toString()));
          }

          // validate the optional field `Loop7` (array)
          for (int i = 0; i < jsonArrayloop7.size(); i++) {
            Loop7TKTREQ.validateJsonObject(jsonArrayloop7.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `MON`
      if (jsonObj.get("MON") != null && !jsonObj.get("MON").isJsonNull()) {
        MON.validateJsonObject(jsonObj.getAsJsonObject("MON"));
      }
      if (jsonObj.get("TXD") != null && !jsonObj.get("TXD").isJsonNull()) {
        JsonArray jsonArrayTXD = jsonObj.getAsJsonArray("TXD");
        if (jsonArrayTXD != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TXD").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TXD` to be an array in the JSON string but got `%s`", jsonObj.get("TXD").toString()));
          }

          // validate the optional field `TXD` (array)
          for (int i = 0; i < jsonArrayTXD.size(); i++) {
            TXD.validateJsonObject(jsonArrayTXD.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `CVR`
      if (jsonObj.get("CVR") != null && !jsonObj.get("CVR").isJsonNull()) {
        CVR.validateJsonObject(jsonObj.getAsJsonObject("CVR"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop6TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop6TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop6TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop6TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop6TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop6TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop6TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop6TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop6TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop6TKTREQ
  */
  public static Loop6TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop6TKTREQ.class);
  }

 /**
  * Convert an instance of Loop6TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

