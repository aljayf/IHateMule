/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.C048;
import org.openapitools.client.model.C361;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EQI
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class EQI {
  public static final String SERIALIZED_NAME_C04801 = "C048_01";
  @SerializedName(SERIALIZED_NAME_C04801)
  private List<C048> C048_01;

  public static final String SERIALIZED_NAME_TYPE_OF_MEANS_OF_TRANSPORT_IDENTIFICATION02 = "TypeOfMeansOfTransportIdentification_02";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_MEANS_OF_TRANSPORT_IDENTIFICATION02)
  private String typeOfMeansOfTransportIdentification02;

  public static final String SERIALIZED_NAME_C36103 = "C361_03";
  @SerializedName(SERIALIZED_NAME_C36103)
  private C361 C361_03;

  public static final String SERIALIZED_NAME_FREE_TEXT04 = "FreeText_04";
  @SerializedName(SERIALIZED_NAME_FREE_TEXT04)
  private String freeText04;

  public EQI() {
  }

  public EQI C048_01(List<C048> C048_01) {
    
    this.C048_01 = C048_01;
    return this;
  }

  public EQI addC04801Item(C048 C048_01Item) {
    if (this.C048_01 == null) {
      this.C048_01 = new ArrayList<>();
    }
    this.C048_01.add(C048_01Item);
    return this;
  }

   /**
   * Get C048_01
   * @return C048_01
  **/
  @javax.annotation.Nullable

  public List<C048> getC04801() {
    return C048_01;
  }


  public void setC04801(List<C048> C048_01) {
    this.C048_01 = C048_01;
  }


  public EQI typeOfMeansOfTransportIdentification02(String typeOfMeansOfTransportIdentification02) {
    
    this.typeOfMeansOfTransportIdentification02 = typeOfMeansOfTransportIdentification02;
    return this;
  }

   /**
   * Get typeOfMeansOfTransportIdentification02
   * @return typeOfMeansOfTransportIdentification02
  **/
  @javax.annotation.Nullable

  public String getTypeOfMeansOfTransportIdentification02() {
    return typeOfMeansOfTransportIdentification02;
  }


  public void setTypeOfMeansOfTransportIdentification02(String typeOfMeansOfTransportIdentification02) {
    this.typeOfMeansOfTransportIdentification02 = typeOfMeansOfTransportIdentification02;
  }


  public EQI C361_03(C361 C361_03) {
    
    this.C361_03 = C361_03;
    return this;
  }

   /**
   * Get C361_03
   * @return C361_03
  **/
  @javax.annotation.Nullable

  public C361 getC36103() {
    return C361_03;
  }


  public void setC36103(C361 C361_03) {
    this.C361_03 = C361_03;
  }


  public EQI freeText04(String freeText04) {
    
    this.freeText04 = freeText04;
    return this;
  }

   /**
   * Get freeText04
   * @return freeText04
  **/
  @javax.annotation.Nullable

  public String getFreeText04() {
    return freeText04;
  }


  public void setFreeText04(String freeText04) {
    this.freeText04 = freeText04;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EQI EQI = (EQI) o;
    return Objects.equals(this.C048_01, EQI.C048_01) &&
        Objects.equals(this.typeOfMeansOfTransportIdentification02, EQI.typeOfMeansOfTransportIdentification02) &&
        Objects.equals(this.C361_03, EQI.C361_03) &&
        Objects.equals(this.freeText04, EQI.freeText04);
  }

  @Override
  public int hashCode() {
    return Objects.hash(C048_01, typeOfMeansOfTransportIdentification02, C361_03, freeText04);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EQI {\n");
    sb.append("    C048_01: ").append(toIndentedString(C048_01)).append("\n");
    sb.append("    typeOfMeansOfTransportIdentification02: ").append(toIndentedString(typeOfMeansOfTransportIdentification02)).append("\n");
    sb.append("    C361_03: ").append(toIndentedString(C361_03)).append("\n");
    sb.append("    freeText04: ").append(toIndentedString(freeText04)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("C048_01");
    openapiFields.add("TypeOfMeansOfTransportIdentification_02");
    openapiFields.add("C361_03");
    openapiFields.add("FreeText_04");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EQI
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EQI.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EQI is not found in the empty JSON string", EQI.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EQI.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EQI` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("C048_01") != null && !jsonObj.get("C048_01").isJsonNull()) {
        JsonArray jsonArrayC048_01 = jsonObj.getAsJsonArray("C048_01");
        if (jsonArrayC048_01 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("C048_01").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `C048_01` to be an array in the JSON string but got `%s`", jsonObj.get("C048_01").toString()));
          }

          // validate the optional field `C048_01` (array)
          for (int i = 0; i < jsonArrayC048_01.size(); i++) {
            C048.validateJsonObject(jsonArrayC048_01.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("TypeOfMeansOfTransportIdentification_02") != null && !jsonObj.get("TypeOfMeansOfTransportIdentification_02").isJsonNull()) && !jsonObj.get("TypeOfMeansOfTransportIdentification_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TypeOfMeansOfTransportIdentification_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TypeOfMeansOfTransportIdentification_02").toString()));
      }
      // validate the optional field `C361_03`
      if (jsonObj.get("C361_03") != null && !jsonObj.get("C361_03").isJsonNull()) {
        C361.validateJsonObject(jsonObj.getAsJsonObject("C361_03"));
      }
      if ((jsonObj.get("FreeText_04") != null && !jsonObj.get("FreeText_04").isJsonNull()) && !jsonObj.get("FreeText_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FreeText_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FreeText_04").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EQI.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EQI' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EQI> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EQI.class));

       return (TypeAdapter<T>) new TypeAdapter<EQI>() {
           @Override
           public void write(JsonWriter out, EQI value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EQI read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EQI given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EQI
  * @throws IOException if the JSON string is invalid with respect to EQI
  */
  public static EQI fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EQI.class);
  }

 /**
  * Convert an instance of EQI to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

