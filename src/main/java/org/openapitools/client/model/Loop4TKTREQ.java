/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.IFT;
import org.openapitools.client.model.Loop5TKTREQ;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.PTS;
import org.openapitools.client.model.TKT;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop4TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop4TKTREQ {
  public static final String SERIALIZED_NAME_T_K_T = "TKT";
  @SerializedName(SERIALIZED_NAME_T_K_T)
  private TKT tkt;

  public static final String SERIALIZED_NAME_I_F_T = "IFT";
  @SerializedName(SERIALIZED_NAME_I_F_T)
  private IFT ift;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_P_T_S = "PTS";
  @SerializedName(SERIALIZED_NAME_P_T_S)
  private PTS pts;

  public static final String SERIALIZED_NAME_LOOP5 = "Loop5";
  @SerializedName(SERIALIZED_NAME_LOOP5)
  private List<Loop5TKTREQ> loop5;

  public Loop4TKTREQ() {
  }

  public Loop4TKTREQ tkt(TKT tkt) {
    
    this.tkt = tkt;
    return this;
  }

   /**
   * Get tkt
   * @return tkt
  **/
  @javax.annotation.Nonnull

  public TKT getTKT() {
    return tkt;
  }


  public void setTKT(TKT tkt) {
    this.tkt = tkt;
  }


  public Loop4TKTREQ ift(IFT ift) {
    
    this.ift = ift;
    return this;
  }

   /**
   * Get ift
   * @return ift
  **/
  @javax.annotation.Nullable

  public IFT getIFT() {
    return ift;
  }


  public void setIFT(IFT ift) {
    this.ift = ift;
  }


  public Loop4TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nullable

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop4TKTREQ pts(PTS pts) {
    
    this.pts = pts;
    return this;
  }

   /**
   * Get pts
   * @return pts
  **/
  @javax.annotation.Nullable

  public PTS getPTS() {
    return pts;
  }


  public void setPTS(PTS pts) {
    this.pts = pts;
  }


  public Loop4TKTREQ loop5(List<Loop5TKTREQ> loop5) {
    
    this.loop5 = loop5;
    return this;
  }

  public Loop4TKTREQ addLoop5Item(Loop5TKTREQ loop5Item) {
    if (this.loop5 == null) {
      this.loop5 = new ArrayList<>();
    }
    this.loop5.add(loop5Item);
    return this;
  }

   /**
   * Get loop5
   * @return loop5
  **/
  @javax.annotation.Nullable

  public List<Loop5TKTREQ> getLoop5() {
    return loop5;
  }


  public void setLoop5(List<Loop5TKTREQ> loop5) {
    this.loop5 = loop5;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop4TKTREQ loop4TKTREQ = (Loop4TKTREQ) o;
    return Objects.equals(this.tkt, loop4TKTREQ.tkt) &&
        Objects.equals(this.ift, loop4TKTREQ.ift) &&
        Objects.equals(this.ptk, loop4TKTREQ.ptk) &&
        Objects.equals(this.pts, loop4TKTREQ.pts) &&
        Objects.equals(this.loop5, loop4TKTREQ.loop5);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tkt, ift, ptk, pts, loop5);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop4TKTREQ {\n");
    sb.append("    tkt: ").append(toIndentedString(tkt)).append("\n");
    sb.append("    ift: ").append(toIndentedString(ift)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    pts: ").append(toIndentedString(pts)).append("\n");
    sb.append("    loop5: ").append(toIndentedString(loop5)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TKT");
    openapiFields.add("IFT");
    openapiFields.add("PTK");
    openapiFields.add("PTS");
    openapiFields.add("Loop5");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TKT");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop4TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop4TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop4TKTREQ is not found in the empty JSON string", Loop4TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop4TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop4TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop4TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `TKT`
      TKT.validateJsonObject(jsonObj.getAsJsonObject("TKT"));
      // validate the optional field `IFT`
      if (jsonObj.get("IFT") != null && !jsonObj.get("IFT").isJsonNull()) {
        IFT.validateJsonObject(jsonObj.getAsJsonObject("IFT"));
      }
      // validate the optional field `PTK`
      if (jsonObj.get("PTK") != null && !jsonObj.get("PTK").isJsonNull()) {
        PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      }
      // validate the optional field `PTS`
      if (jsonObj.get("PTS") != null && !jsonObj.get("PTS").isJsonNull()) {
        PTS.validateJsonObject(jsonObj.getAsJsonObject("PTS"));
      }
      if (jsonObj.get("Loop5") != null && !jsonObj.get("Loop5").isJsonNull()) {
        JsonArray jsonArrayloop5 = jsonObj.getAsJsonArray("Loop5");
        if (jsonArrayloop5 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop5").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop5` to be an array in the JSON string but got `%s`", jsonObj.get("Loop5").toString()));
          }

          // validate the optional field `Loop5` (array)
          for (int i = 0; i < jsonArrayloop5.size(); i++) {
            Loop5TKTREQ.validateJsonObject(jsonArrayloop5.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop4TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop4TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop4TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop4TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop4TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop4TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop4TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop4TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop4TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop4TKTREQ
  */
  public static Loop4TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop4TKTREQ.class);
  }

 /**
  * Convert an instance of Loop4TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

