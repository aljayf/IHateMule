/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.APD;
import org.openapitools.client.model.CPN;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.PTS;
import org.openapitools.client.model.RTG;
import org.openapitools.client.model.STX;
import org.openapitools.client.model.TKT;
import org.openapitools.client.model.TVL;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop10TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop10TKTREQ {
  public static final String SERIALIZED_NAME_S_T_X = "STX";
  @SerializedName(SERIALIZED_NAME_S_T_X)
  private STX stx;

  public static final String SERIALIZED_NAME_T_V_L = "TVL";
  @SerializedName(SERIALIZED_NAME_T_V_L)
  private List<TVL> TVL;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_T_K_T = "TKT";
  @SerializedName(SERIALIZED_NAME_T_K_T)
  private TKT tkt;

  public static final String SERIALIZED_NAME_C_P_N = "CPN";
  @SerializedName(SERIALIZED_NAME_C_P_N)
  private List<CPN> CPN;

  public static final String SERIALIZED_NAME_P_T_S = "PTS";
  @SerializedName(SERIALIZED_NAME_P_T_S)
  private PTS pts;

  public static final String SERIALIZED_NAME_R_T_G = "RTG";
  @SerializedName(SERIALIZED_NAME_R_T_G)
  private List<RTG> RTG;

  public static final String SERIALIZED_NAME_A_P_D = "APD";
  @SerializedName(SERIALIZED_NAME_A_P_D)
  private APD apd;

  public Loop10TKTREQ() {
  }

  public Loop10TKTREQ stx(STX stx) {
    
    this.stx = stx;
    return this;
  }

   /**
   * Get stx
   * @return stx
  **/
  @javax.annotation.Nonnull

  public STX getSTX() {
    return stx;
  }


  public void setSTX(STX stx) {
    this.stx = stx;
  }


  public Loop10TKTREQ TVL(List<TVL> TVL) {
    
    this.TVL = TVL;
    return this;
  }

  public Loop10TKTREQ addTVLItem(TVL TVLItem) {
    if (this.TVL == null) {
      this.TVL = new ArrayList<>();
    }
    this.TVL.add(TVLItem);
    return this;
  }

   /**
   * Get TVL
   * @return TVL
  **/
  @javax.annotation.Nullable

  public List<TVL> getTVL() {
    return TVL;
  }


  public void setTVL(List<TVL> TVL) {
    this.TVL = TVL;
  }


  public Loop10TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nullable

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop10TKTREQ tkt(TKT tkt) {
    
    this.tkt = tkt;
    return this;
  }

   /**
   * Get tkt
   * @return tkt
  **/
  @javax.annotation.Nullable

  public TKT getTKT() {
    return tkt;
  }


  public void setTKT(TKT tkt) {
    this.tkt = tkt;
  }


  public Loop10TKTREQ CPN(List<CPN> CPN) {
    
    this.CPN = CPN;
    return this;
  }

  public Loop10TKTREQ addCPNItem(CPN CPNItem) {
    if (this.CPN == null) {
      this.CPN = new ArrayList<>();
    }
    this.CPN.add(CPNItem);
    return this;
  }

   /**
   * Get CPN
   * @return CPN
  **/
  @javax.annotation.Nullable

  public List<CPN> getCPN() {
    return CPN;
  }


  public void setCPN(List<CPN> CPN) {
    this.CPN = CPN;
  }


  public Loop10TKTREQ pts(PTS pts) {
    
    this.pts = pts;
    return this;
  }

   /**
   * Get pts
   * @return pts
  **/
  @javax.annotation.Nullable

  public PTS getPTS() {
    return pts;
  }


  public void setPTS(PTS pts) {
    this.pts = pts;
  }


  public Loop10TKTREQ RTG(List<RTG> RTG) {
    
    this.RTG = RTG;
    return this;
  }

  public Loop10TKTREQ addRTGItem(RTG RTGItem) {
    if (this.RTG == null) {
      this.RTG = new ArrayList<>();
    }
    this.RTG.add(RTGItem);
    return this;
  }

   /**
   * Get RTG
   * @return RTG
  **/
  @javax.annotation.Nullable

  public List<RTG> getRTG() {
    return RTG;
  }


  public void setRTG(List<RTG> RTG) {
    this.RTG = RTG;
  }


  public Loop10TKTREQ apd(APD apd) {
    
    this.apd = apd;
    return this;
  }

   /**
   * Get apd
   * @return apd
  **/
  @javax.annotation.Nullable

  public APD getAPD() {
    return apd;
  }


  public void setAPD(APD apd) {
    this.apd = apd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop10TKTREQ loop10TKTREQ = (Loop10TKTREQ) o;
    return Objects.equals(this.stx, loop10TKTREQ.stx) &&
        Objects.equals(this.TVL, loop10TKTREQ.TVL) &&
        Objects.equals(this.ptk, loop10TKTREQ.ptk) &&
        Objects.equals(this.tkt, loop10TKTREQ.tkt) &&
        Objects.equals(this.CPN, loop10TKTREQ.CPN) &&
        Objects.equals(this.pts, loop10TKTREQ.pts) &&
        Objects.equals(this.RTG, loop10TKTREQ.RTG) &&
        Objects.equals(this.apd, loop10TKTREQ.apd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stx, TVL, ptk, tkt, CPN, pts, RTG, apd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop10TKTREQ {\n");
    sb.append("    stx: ").append(toIndentedString(stx)).append("\n");
    sb.append("    TVL: ").append(toIndentedString(TVL)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    tkt: ").append(toIndentedString(tkt)).append("\n");
    sb.append("    CPN: ").append(toIndentedString(CPN)).append("\n");
    sb.append("    pts: ").append(toIndentedString(pts)).append("\n");
    sb.append("    RTG: ").append(toIndentedString(RTG)).append("\n");
    sb.append("    apd: ").append(toIndentedString(apd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("STX");
    openapiFields.add("TVL");
    openapiFields.add("PTK");
    openapiFields.add("TKT");
    openapiFields.add("CPN");
    openapiFields.add("PTS");
    openapiFields.add("RTG");
    openapiFields.add("APD");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("STX");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop10TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop10TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop10TKTREQ is not found in the empty JSON string", Loop10TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop10TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop10TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop10TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `STX`
      STX.validateJsonObject(jsonObj.getAsJsonObject("STX"));
      if (jsonObj.get("TVL") != null && !jsonObj.get("TVL").isJsonNull()) {
        JsonArray jsonArrayTVL = jsonObj.getAsJsonArray("TVL");
        if (jsonArrayTVL != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TVL").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TVL` to be an array in the JSON string but got `%s`", jsonObj.get("TVL").toString()));
          }

          // validate the optional field `TVL` (array)
          for (int i = 0; i < jsonArrayTVL.size(); i++) {
            TVL.validateJsonObject(jsonArrayTVL.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `PTK`
      if (jsonObj.get("PTK") != null && !jsonObj.get("PTK").isJsonNull()) {
        PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      }
      // validate the optional field `TKT`
      if (jsonObj.get("TKT") != null && !jsonObj.get("TKT").isJsonNull()) {
        TKT.validateJsonObject(jsonObj.getAsJsonObject("TKT"));
      }
      if (jsonObj.get("CPN") != null && !jsonObj.get("CPN").isJsonNull()) {
        JsonArray jsonArrayCPN = jsonObj.getAsJsonArray("CPN");
        if (jsonArrayCPN != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CPN").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CPN` to be an array in the JSON string but got `%s`", jsonObj.get("CPN").toString()));
          }

          // validate the optional field `CPN` (array)
          for (int i = 0; i < jsonArrayCPN.size(); i++) {
            CPN.validateJsonObject(jsonArrayCPN.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `PTS`
      if (jsonObj.get("PTS") != null && !jsonObj.get("PTS").isJsonNull()) {
        PTS.validateJsonObject(jsonObj.getAsJsonObject("PTS"));
      }
      if (jsonObj.get("RTG") != null && !jsonObj.get("RTG").isJsonNull()) {
        JsonArray jsonArrayRTG = jsonObj.getAsJsonArray("RTG");
        if (jsonArrayRTG != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RTG").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RTG` to be an array in the JSON string but got `%s`", jsonObj.get("RTG").toString()));
          }

          // validate the optional field `RTG` (array)
          for (int i = 0; i < jsonArrayRTG.size(); i++) {
            RTG.validateJsonObject(jsonArrayRTG.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `APD`
      if (jsonObj.get("APD") != null && !jsonObj.get("APD").isJsonNull()) {
        APD.validateJsonObject(jsonObj.getAsJsonObject("APD"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop10TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop10TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop10TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop10TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop10TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop10TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop10TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop10TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop10TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop10TKTREQ
  */
  public static Loop10TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop10TKTREQ.class);
  }

 /**
  * Convert an instance of Loop10TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

