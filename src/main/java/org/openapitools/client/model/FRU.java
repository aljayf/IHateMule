/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.C306;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FRU
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class FRU {
  public static final String SERIALIZED_NAME_RATETARIFF_CLASS_IDENTIFICATION01 = "RatetariffClassIdentification_01";
  @SerializedName(SERIALIZED_NAME_RATETARIFF_CLASS_IDENTIFICATION01)
  private String ratetariffClassIdentification01;

  public static final String SERIALIZED_NAME_C30602 = "C306_02";
  @SerializedName(SERIALIZED_NAME_C30602)
  private C306 C306_02;

  public static final String SERIALIZED_NAME_RULE_PART_IDENTIFICATION03 = "RulePartIdentification_03";
  @SerializedName(SERIALIZED_NAME_RULE_PART_IDENTIFICATION03)
  private List<String> rulePartIdentification03;

  public FRU() {
  }

  public FRU ratetariffClassIdentification01(String ratetariffClassIdentification01) {
    
    this.ratetariffClassIdentification01 = ratetariffClassIdentification01;
    return this;
  }

   /**
   * Get ratetariffClassIdentification01
   * @return ratetariffClassIdentification01
  **/
  @javax.annotation.Nullable

  public String getRatetariffClassIdentification01() {
    return ratetariffClassIdentification01;
  }


  public void setRatetariffClassIdentification01(String ratetariffClassIdentification01) {
    this.ratetariffClassIdentification01 = ratetariffClassIdentification01;
  }


  public FRU C306_02(C306 C306_02) {
    
    this.C306_02 = C306_02;
    return this;
  }

   /**
   * Get C306_02
   * @return C306_02
  **/
  @javax.annotation.Nullable

  public C306 getC30602() {
    return C306_02;
  }


  public void setC30602(C306 C306_02) {
    this.C306_02 = C306_02;
  }


  public FRU rulePartIdentification03(List<String> rulePartIdentification03) {
    
    this.rulePartIdentification03 = rulePartIdentification03;
    return this;
  }

  public FRU addRulePartIdentification03Item(String rulePartIdentification03Item) {
    if (this.rulePartIdentification03 == null) {
      this.rulePartIdentification03 = new ArrayList<>();
    }
    this.rulePartIdentification03.add(rulePartIdentification03Item);
    return this;
  }

   /**
   * Get rulePartIdentification03
   * @return rulePartIdentification03
  **/
  @javax.annotation.Nullable

  public List<String> getRulePartIdentification03() {
    return rulePartIdentification03;
  }


  public void setRulePartIdentification03(List<String> rulePartIdentification03) {
    this.rulePartIdentification03 = rulePartIdentification03;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FRU FRU = (FRU) o;
    return Objects.equals(this.ratetariffClassIdentification01, FRU.ratetariffClassIdentification01) &&
        Objects.equals(this.C306_02, FRU.C306_02) &&
        Objects.equals(this.rulePartIdentification03, FRU.rulePartIdentification03);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ratetariffClassIdentification01, C306_02, rulePartIdentification03);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FRU {\n");
    sb.append("    ratetariffClassIdentification01: ").append(toIndentedString(ratetariffClassIdentification01)).append("\n");
    sb.append("    C306_02: ").append(toIndentedString(C306_02)).append("\n");
    sb.append("    rulePartIdentification03: ").append(toIndentedString(rulePartIdentification03)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RatetariffClassIdentification_01");
    openapiFields.add("C306_02");
    openapiFields.add("RulePartIdentification_03");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FRU
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FRU.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FRU is not found in the empty JSON string", FRU.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FRU.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FRU` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("RatetariffClassIdentification_01") != null && !jsonObj.get("RatetariffClassIdentification_01").isJsonNull()) && !jsonObj.get("RatetariffClassIdentification_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RatetariffClassIdentification_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RatetariffClassIdentification_01").toString()));
      }
      // validate the optional field `C306_02`
      if (jsonObj.get("C306_02") != null && !jsonObj.get("C306_02").isJsonNull()) {
        C306.validateJsonObject(jsonObj.getAsJsonObject("C306_02"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RulePartIdentification_03") != null && !jsonObj.get("RulePartIdentification_03").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RulePartIdentification_03` to be an array in the JSON string but got `%s`", jsonObj.get("RulePartIdentification_03").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FRU.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FRU' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FRU> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FRU.class));

       return (TypeAdapter<T>) new TypeAdapter<FRU>() {
           @Override
           public void write(JsonWriter out, FRU value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FRU read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FRU given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FRU
  * @throws IOException if the JSON string is invalid with respect to FRU
  */
  public static FRU fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FRU.class);
  }

 /**
  * Convert an instance of FRU to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

