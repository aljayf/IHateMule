/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.FOP;
import org.openapitools.client.model.Loop15TKTREQ;
import org.openapitools.client.model.MON;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.SPI;
import org.openapitools.client.model.TXD;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop14TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop14TKTREQ {
  public static final String SERIALIZED_NAME_S_P_I = "SPI";
  @SerializedName(SERIALIZED_NAME_S_P_I)
  private SPI spi;

  public static final String SERIALIZED_NAME_M_O_N = "MON";
  @SerializedName(SERIALIZED_NAME_M_O_N)
  private MON mon;

  public static final String SERIALIZED_NAME_F_O_P = "FOP";
  @SerializedName(SERIALIZED_NAME_F_O_P)
  private FOP fop;

  public static final String SERIALIZED_NAME_T_X_D = "TXD";
  @SerializedName(SERIALIZED_NAME_T_X_D)
  private List<TXD> TXD;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_LOOP15 = "Loop15";
  @SerializedName(SERIALIZED_NAME_LOOP15)
  private List<Loop15TKTREQ> loop15;

  public Loop14TKTREQ() {
  }

  public Loop14TKTREQ spi(SPI spi) {
    
    this.spi = spi;
    return this;
  }

   /**
   * Get spi
   * @return spi
  **/
  @javax.annotation.Nonnull

  public SPI getSPI() {
    return spi;
  }


  public void setSPI(SPI spi) {
    this.spi = spi;
  }


  public Loop14TKTREQ mon(MON mon) {
    
    this.mon = mon;
    return this;
  }

   /**
   * Get mon
   * @return mon
  **/
  @javax.annotation.Nonnull

  public MON getMON() {
    return mon;
  }


  public void setMON(MON mon) {
    this.mon = mon;
  }


  public Loop14TKTREQ fop(FOP fop) {
    
    this.fop = fop;
    return this;
  }

   /**
   * Get fop
   * @return fop
  **/
  @javax.annotation.Nonnull

  public FOP getFOP() {
    return fop;
  }


  public void setFOP(FOP fop) {
    this.fop = fop;
  }


  public Loop14TKTREQ TXD(List<TXD> TXD) {
    
    this.TXD = TXD;
    return this;
  }

  public Loop14TKTREQ addTXDItem(TXD TXDItem) {
    if (this.TXD == null) {
      this.TXD = new ArrayList<>();
    }
    this.TXD.add(TXDItem);
    return this;
  }

   /**
   * Get TXD
   * @return TXD
  **/
  @javax.annotation.Nullable

  public List<TXD> getTXD() {
    return TXD;
  }


  public void setTXD(List<TXD> TXD) {
    this.TXD = TXD;
  }


  public Loop14TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nullable

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop14TKTREQ loop15(List<Loop15TKTREQ> loop15) {
    
    this.loop15 = loop15;
    return this;
  }

  public Loop14TKTREQ addLoop15Item(Loop15TKTREQ loop15Item) {
    if (this.loop15 == null) {
      this.loop15 = new ArrayList<>();
    }
    this.loop15.add(loop15Item);
    return this;
  }

   /**
   * Get loop15
   * @return loop15
  **/
  @javax.annotation.Nullable

  public List<Loop15TKTREQ> getLoop15() {
    return loop15;
  }


  public void setLoop15(List<Loop15TKTREQ> loop15) {
    this.loop15 = loop15;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop14TKTREQ loop14TKTREQ = (Loop14TKTREQ) o;
    return Objects.equals(this.spi, loop14TKTREQ.spi) &&
        Objects.equals(this.mon, loop14TKTREQ.mon) &&
        Objects.equals(this.fop, loop14TKTREQ.fop) &&
        Objects.equals(this.TXD, loop14TKTREQ.TXD) &&
        Objects.equals(this.ptk, loop14TKTREQ.ptk) &&
        Objects.equals(this.loop15, loop14TKTREQ.loop15);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spi, mon, fop, TXD, ptk, loop15);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop14TKTREQ {\n");
    sb.append("    spi: ").append(toIndentedString(spi)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    fop: ").append(toIndentedString(fop)).append("\n");
    sb.append("    TXD: ").append(toIndentedString(TXD)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    loop15: ").append(toIndentedString(loop15)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SPI");
    openapiFields.add("MON");
    openapiFields.add("FOP");
    openapiFields.add("TXD");
    openapiFields.add("PTK");
    openapiFields.add("Loop15");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SPI");
    openapiRequiredFields.add("MON");
    openapiRequiredFields.add("FOP");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop14TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop14TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop14TKTREQ is not found in the empty JSON string", Loop14TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop14TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop14TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop14TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `SPI`
      SPI.validateJsonObject(jsonObj.getAsJsonObject("SPI"));
      // validate the required field `MON`
      MON.validateJsonObject(jsonObj.getAsJsonObject("MON"));
      // validate the required field `FOP`
      FOP.validateJsonObject(jsonObj.getAsJsonObject("FOP"));
      if (jsonObj.get("TXD") != null && !jsonObj.get("TXD").isJsonNull()) {
        JsonArray jsonArrayTXD = jsonObj.getAsJsonArray("TXD");
        if (jsonArrayTXD != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TXD").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TXD` to be an array in the JSON string but got `%s`", jsonObj.get("TXD").toString()));
          }

          // validate the optional field `TXD` (array)
          for (int i = 0; i < jsonArrayTXD.size(); i++) {
            TXD.validateJsonObject(jsonArrayTXD.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `PTK`
      if (jsonObj.get("PTK") != null && !jsonObj.get("PTK").isJsonNull()) {
        PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      }
      if (jsonObj.get("Loop15") != null && !jsonObj.get("Loop15").isJsonNull()) {
        JsonArray jsonArrayloop15 = jsonObj.getAsJsonArray("Loop15");
        if (jsonArrayloop15 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop15").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop15` to be an array in the JSON string but got `%s`", jsonObj.get("Loop15").toString()));
          }

          // validate the optional field `Loop15` (array)
          for (int i = 0; i < jsonArrayloop15.size(); i++) {
            Loop15TKTREQ.validateJsonObject(jsonArrayloop15.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop14TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop14TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop14TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop14TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop14TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop14TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop14TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop14TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop14TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop14TKTREQ
  */
  public static Loop14TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop14TKTREQ.class);
  }

 /**
  * Convert an instance of Loop14TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

