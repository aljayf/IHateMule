/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C300
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C300 {
  public static final String SERIALIZED_NAME_TRAVEL_AGENT_IDENTIFICATION_DETAILS01 = "TravelAgentIdentificationDetails_01";
  @SerializedName(SERIALIZED_NAME_TRAVEL_AGENT_IDENTIFICATION_DETAILS01)
  private String travelAgentIdentificationDetails01;

  public static final String SERIALIZED_NAME_INHOUSE_IDENTIFICATION02 = "InhouseIdentification_02";
  @SerializedName(SERIALIZED_NAME_INHOUSE_IDENTIFICATION02)
  private String inhouseIdentification02;

  public static final String SERIALIZED_NAME_INHOUSE_IDENTIFICATION03 = "InhouseIdentification_03";
  @SerializedName(SERIALIZED_NAME_INHOUSE_IDENTIFICATION03)
  private String inhouseIdentification03;

  public static final String SERIALIZED_NAME_INHOUSE_IDENTIFICATION04 = "InhouseIdentification_04";
  @SerializedName(SERIALIZED_NAME_INHOUSE_IDENTIFICATION04)
  private String inhouseIdentification04;

  public C300() {
  }

  public C300 travelAgentIdentificationDetails01(String travelAgentIdentificationDetails01) {
    
    this.travelAgentIdentificationDetails01 = travelAgentIdentificationDetails01;
    return this;
  }

   /**
   * Get travelAgentIdentificationDetails01
   * @return travelAgentIdentificationDetails01
  **/
  @javax.annotation.Nullable

  public String getTravelAgentIdentificationDetails01() {
    return travelAgentIdentificationDetails01;
  }


  public void setTravelAgentIdentificationDetails01(String travelAgentIdentificationDetails01) {
    this.travelAgentIdentificationDetails01 = travelAgentIdentificationDetails01;
  }


  public C300 inhouseIdentification02(String inhouseIdentification02) {
    
    this.inhouseIdentification02 = inhouseIdentification02;
    return this;
  }

   /**
   * Get inhouseIdentification02
   * @return inhouseIdentification02
  **/
  @javax.annotation.Nullable

  public String getInhouseIdentification02() {
    return inhouseIdentification02;
  }


  public void setInhouseIdentification02(String inhouseIdentification02) {
    this.inhouseIdentification02 = inhouseIdentification02;
  }


  public C300 inhouseIdentification03(String inhouseIdentification03) {
    
    this.inhouseIdentification03 = inhouseIdentification03;
    return this;
  }

   /**
   * Get inhouseIdentification03
   * @return inhouseIdentification03
  **/
  @javax.annotation.Nullable

  public String getInhouseIdentification03() {
    return inhouseIdentification03;
  }


  public void setInhouseIdentification03(String inhouseIdentification03) {
    this.inhouseIdentification03 = inhouseIdentification03;
  }


  public C300 inhouseIdentification04(String inhouseIdentification04) {
    
    this.inhouseIdentification04 = inhouseIdentification04;
    return this;
  }

   /**
   * Get inhouseIdentification04
   * @return inhouseIdentification04
  **/
  @javax.annotation.Nullable

  public String getInhouseIdentification04() {
    return inhouseIdentification04;
  }


  public void setInhouseIdentification04(String inhouseIdentification04) {
    this.inhouseIdentification04 = inhouseIdentification04;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C300 C300 = (C300) o;
    return Objects.equals(this.travelAgentIdentificationDetails01, C300.travelAgentIdentificationDetails01) &&
        Objects.equals(this.inhouseIdentification02, C300.inhouseIdentification02) &&
        Objects.equals(this.inhouseIdentification03, C300.inhouseIdentification03) &&
        Objects.equals(this.inhouseIdentification04, C300.inhouseIdentification04);
  }

  @Override
  public int hashCode() {
    return Objects.hash(travelAgentIdentificationDetails01, inhouseIdentification02, inhouseIdentification03, inhouseIdentification04);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C300 {\n");
    sb.append("    travelAgentIdentificationDetails01: ").append(toIndentedString(travelAgentIdentificationDetails01)).append("\n");
    sb.append("    inhouseIdentification02: ").append(toIndentedString(inhouseIdentification02)).append("\n");
    sb.append("    inhouseIdentification03: ").append(toIndentedString(inhouseIdentification03)).append("\n");
    sb.append("    inhouseIdentification04: ").append(toIndentedString(inhouseIdentification04)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TravelAgentIdentificationDetails_01");
    openapiFields.add("InhouseIdentification_02");
    openapiFields.add("InhouseIdentification_03");
    openapiFields.add("InhouseIdentification_04");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C300
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C300.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C300 is not found in the empty JSON string", C300.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C300.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C300` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("TravelAgentIdentificationDetails_01") != null && !jsonObj.get("TravelAgentIdentificationDetails_01").isJsonNull()) && !jsonObj.get("TravelAgentIdentificationDetails_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TravelAgentIdentificationDetails_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TravelAgentIdentificationDetails_01").toString()));
      }
      if ((jsonObj.get("InhouseIdentification_02") != null && !jsonObj.get("InhouseIdentification_02").isJsonNull()) && !jsonObj.get("InhouseIdentification_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InhouseIdentification_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InhouseIdentification_02").toString()));
      }
      if ((jsonObj.get("InhouseIdentification_03") != null && !jsonObj.get("InhouseIdentification_03").isJsonNull()) && !jsonObj.get("InhouseIdentification_03").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InhouseIdentification_03` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InhouseIdentification_03").toString()));
      }
      if ((jsonObj.get("InhouseIdentification_04") != null && !jsonObj.get("InhouseIdentification_04").isJsonNull()) && !jsonObj.get("InhouseIdentification_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InhouseIdentification_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InhouseIdentification_04").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C300.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C300' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C300> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C300.class));

       return (TypeAdapter<T>) new TypeAdapter<C300>() {
           @Override
           public void write(JsonWriter out, C300 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C300 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C300 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C300
  * @throws IOException if the JSON string is invalid with respect to C300
  */
  public static C300 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C300.class);
  }

 /**
  * Convert an instance of C300 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

