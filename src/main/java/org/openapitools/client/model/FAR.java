/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.C644;
import org.openapitools.client.model.C662;
import org.openapitools.client.model.EDIFACTID6353;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FAR
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class FAR {
  public static final String SERIALIZED_NAME_NUMBER_OF_UNITS_QUALIFIER01 = "NumberOfUnitsQualifier_01";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UNITS_QUALIFIER01)
  private EDIFACTID6353 numberOfUnitsQualifier01;

  public static final String SERIALIZED_NAME_QUANTITY02 = "Quantity_02";
  @SerializedName(SERIALIZED_NAME_QUANTITY02)
  private String quantity02;

  public static final String SERIALIZED_NAME_C66203 = "C662_03";
  @SerializedName(SERIALIZED_NAME_C66203)
  private C662 C662_03;

  public static final String SERIALIZED_NAME_IDENTITY_NUMBER04 = "IdentityNumber_04";
  @SerializedName(SERIALIZED_NAME_IDENTITY_NUMBER04)
  private String identityNumber04;

  public static final String SERIALIZED_NAME_C64405 = "C644_05";
  @SerializedName(SERIALIZED_NAME_C64405)
  private C644 C644_05;

  public static final String SERIALIZED_NAME_RATE_TARIFF_CLASS06 = "RateTariffClass_06";
  @SerializedName(SERIALIZED_NAME_RATE_TARIFF_CLASS06)
  private List<String> rateTariffClass06;

  public FAR() {
  }

  public FAR numberOfUnitsQualifier01(EDIFACTID6353 numberOfUnitsQualifier01) {
    
    this.numberOfUnitsQualifier01 = numberOfUnitsQualifier01;
    return this;
  }

   /**
   * Get numberOfUnitsQualifier01
   * @return numberOfUnitsQualifier01
  **/
  @javax.annotation.Nullable

  public EDIFACTID6353 getNumberOfUnitsQualifier01() {
    return numberOfUnitsQualifier01;
  }


  public void setNumberOfUnitsQualifier01(EDIFACTID6353 numberOfUnitsQualifier01) {
    this.numberOfUnitsQualifier01 = numberOfUnitsQualifier01;
  }


  public FAR quantity02(String quantity02) {
    
    this.quantity02 = quantity02;
    return this;
  }

   /**
   * Get quantity02
   * @return quantity02
  **/
  @javax.annotation.Nullable

  public String getQuantity02() {
    return quantity02;
  }


  public void setQuantity02(String quantity02) {
    this.quantity02 = quantity02;
  }


  public FAR C662_03(C662 C662_03) {
    
    this.C662_03 = C662_03;
    return this;
  }

   /**
   * Get C662_03
   * @return C662_03
  **/
  @javax.annotation.Nullable

  public C662 getC66203() {
    return C662_03;
  }


  public void setC66203(C662 C662_03) {
    this.C662_03 = C662_03;
  }


  public FAR identityNumber04(String identityNumber04) {
    
    this.identityNumber04 = identityNumber04;
    return this;
  }

   /**
   * Get identityNumber04
   * @return identityNumber04
  **/
  @javax.annotation.Nullable

  public String getIdentityNumber04() {
    return identityNumber04;
  }


  public void setIdentityNumber04(String identityNumber04) {
    this.identityNumber04 = identityNumber04;
  }


  public FAR C644_05(C644 C644_05) {
    
    this.C644_05 = C644_05;
    return this;
  }

   /**
   * Get C644_05
   * @return C644_05
  **/
  @javax.annotation.Nullable

  public C644 getC64405() {
    return C644_05;
  }


  public void setC64405(C644 C644_05) {
    this.C644_05 = C644_05;
  }


  public FAR rateTariffClass06(List<String> rateTariffClass06) {
    
    this.rateTariffClass06 = rateTariffClass06;
    return this;
  }

  public FAR addRateTariffClass06Item(String rateTariffClass06Item) {
    if (this.rateTariffClass06 == null) {
      this.rateTariffClass06 = new ArrayList<>();
    }
    this.rateTariffClass06.add(rateTariffClass06Item);
    return this;
  }

   /**
   * Get rateTariffClass06
   * @return rateTariffClass06
  **/
  @javax.annotation.Nullable

  public List<String> getRateTariffClass06() {
    return rateTariffClass06;
  }


  public void setRateTariffClass06(List<String> rateTariffClass06) {
    this.rateTariffClass06 = rateTariffClass06;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FAR FAR = (FAR) o;
    return Objects.equals(this.numberOfUnitsQualifier01, FAR.numberOfUnitsQualifier01) &&
        Objects.equals(this.quantity02, FAR.quantity02) &&
        Objects.equals(this.C662_03, FAR.C662_03) &&
        Objects.equals(this.identityNumber04, FAR.identityNumber04) &&
        Objects.equals(this.C644_05, FAR.C644_05) &&
        Objects.equals(this.rateTariffClass06, FAR.rateTariffClass06);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numberOfUnitsQualifier01, quantity02, C662_03, identityNumber04, C644_05, rateTariffClass06);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FAR {\n");
    sb.append("    numberOfUnitsQualifier01: ").append(toIndentedString(numberOfUnitsQualifier01)).append("\n");
    sb.append("    quantity02: ").append(toIndentedString(quantity02)).append("\n");
    sb.append("    C662_03: ").append(toIndentedString(C662_03)).append("\n");
    sb.append("    identityNumber04: ").append(toIndentedString(identityNumber04)).append("\n");
    sb.append("    C644_05: ").append(toIndentedString(C644_05)).append("\n");
    sb.append("    rateTariffClass06: ").append(toIndentedString(rateTariffClass06)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NumberOfUnitsQualifier_01");
    openapiFields.add("Quantity_02");
    openapiFields.add("C662_03");
    openapiFields.add("IdentityNumber_04");
    openapiFields.add("C644_05");
    openapiFields.add("RateTariffClass_06");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FAR
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FAR.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FAR is not found in the empty JSON string", FAR.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FAR.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FAR` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Quantity_02") != null && !jsonObj.get("Quantity_02").isJsonNull()) && !jsonObj.get("Quantity_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quantity_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quantity_02").toString()));
      }
      // validate the optional field `C662_03`
      if (jsonObj.get("C662_03") != null && !jsonObj.get("C662_03").isJsonNull()) {
        C662.validateJsonObject(jsonObj.getAsJsonObject("C662_03"));
      }
      if ((jsonObj.get("IdentityNumber_04") != null && !jsonObj.get("IdentityNumber_04").isJsonNull()) && !jsonObj.get("IdentityNumber_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdentityNumber_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IdentityNumber_04").toString()));
      }
      // validate the optional field `C644_05`
      if (jsonObj.get("C644_05") != null && !jsonObj.get("C644_05").isJsonNull()) {
        C644.validateJsonObject(jsonObj.getAsJsonObject("C644_05"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RateTariffClass_06") != null && !jsonObj.get("RateTariffClass_06").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RateTariffClass_06` to be an array in the JSON string but got `%s`", jsonObj.get("RateTariffClass_06").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FAR.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FAR' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FAR> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FAR.class));

       return (TypeAdapter<T>) new TypeAdapter<FAR>() {
           @Override
           public void write(JsonWriter out, FAR value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FAR read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FAR given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FAR
  * @throws IOException if the JSON string is invalid with respect to FAR
  */
  public static FAR fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FAR.class);
  }

 /**
  * Convert an instance of FAR to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

