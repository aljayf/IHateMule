/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID3207;
import org.openapitools.client.model.EDIFACTID5007;
import org.openapitools.client.model.EDIFACTID5153;
import org.openapitools.client.model.EDIFACTID6345;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C668
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C668 {
  public static final String SERIALIZED_NAME_DUTYTAXFEE_RATE01 = "DutytaxfeeRate_01";
  @SerializedName(SERIALIZED_NAME_DUTYTAXFEE_RATE01)
  private String dutytaxfeeRate01;

  public static final String SERIALIZED_NAME_COUNTRY02 = "Country_02";
  @SerializedName(SERIALIZED_NAME_COUNTRY02)
  private EDIFACTID3207 country02;

  public static final String SERIALIZED_NAME_CURRENCY03 = "Currency_03";
  @SerializedName(SERIALIZED_NAME_CURRENCY03)
  private EDIFACTID6345 currency03;

  public static final String SERIALIZED_NAME_DUTY_TAX_FEE_TYPE04 = "DutyTaxFeeType_04";
  @SerializedName(SERIALIZED_NAME_DUTY_TAX_FEE_TYPE04)
  private EDIFACTID5153 dutyTaxFeeType04;

  public static final String SERIALIZED_NAME_DUTYTAXFEE_RATE05 = "DutytaxfeeRate_05";
  @SerializedName(SERIALIZED_NAME_DUTYTAXFEE_RATE05)
  private String dutytaxfeeRate05;

  public static final String SERIALIZED_NAME_CURRENCY06 = "Currency_06";
  @SerializedName(SERIALIZED_NAME_CURRENCY06)
  private EDIFACTID6345 currency06;

  public static final String SERIALIZED_NAME_DUTY_TAX_FEE_TYPE07 = "DutyTaxFeeType_07";
  @SerializedName(SERIALIZED_NAME_DUTY_TAX_FEE_TYPE07)
  private EDIFACTID5153 dutyTaxFeeType07;

  public static final String SERIALIZED_NAME_MONETARY_AMOUNT08 = "MonetaryAmount_08";
  @SerializedName(SERIALIZED_NAME_MONETARY_AMOUNT08)
  private String monetaryAmount08;

  public static final String SERIALIZED_NAME_MONETARY_FUNCTION09 = "MonetaryFunction_09";
  @SerializedName(SERIALIZED_NAME_MONETARY_FUNCTION09)
  private EDIFACTID5007 monetaryFunction09;

  public static final String SERIALIZED_NAME_MONETARY_FUNCTION10 = "MonetaryFunction_10";
  @SerializedName(SERIALIZED_NAME_MONETARY_FUNCTION10)
  private EDIFACTID5007 monetaryFunction10;

  public C668() {
  }

  public C668 dutytaxfeeRate01(String dutytaxfeeRate01) {
    
    this.dutytaxfeeRate01 = dutytaxfeeRate01;
    return this;
  }

   /**
   * Get dutytaxfeeRate01
   * @return dutytaxfeeRate01
  **/
  @javax.annotation.Nullable

  public String getDutytaxfeeRate01() {
    return dutytaxfeeRate01;
  }


  public void setDutytaxfeeRate01(String dutytaxfeeRate01) {
    this.dutytaxfeeRate01 = dutytaxfeeRate01;
  }


  public C668 country02(EDIFACTID3207 country02) {
    
    this.country02 = country02;
    return this;
  }

   /**
   * Get country02
   * @return country02
  **/
  @javax.annotation.Nullable

  public EDIFACTID3207 getCountry02() {
    return country02;
  }


  public void setCountry02(EDIFACTID3207 country02) {
    this.country02 = country02;
  }


  public C668 currency03(EDIFACTID6345 currency03) {
    
    this.currency03 = currency03;
    return this;
  }

   /**
   * Get currency03
   * @return currency03
  **/
  @javax.annotation.Nullable

  public EDIFACTID6345 getCurrency03() {
    return currency03;
  }


  public void setCurrency03(EDIFACTID6345 currency03) {
    this.currency03 = currency03;
  }


  public C668 dutyTaxFeeType04(EDIFACTID5153 dutyTaxFeeType04) {
    
    this.dutyTaxFeeType04 = dutyTaxFeeType04;
    return this;
  }

   /**
   * Get dutyTaxFeeType04
   * @return dutyTaxFeeType04
  **/
  @javax.annotation.Nullable

  public EDIFACTID5153 getDutyTaxFeeType04() {
    return dutyTaxFeeType04;
  }


  public void setDutyTaxFeeType04(EDIFACTID5153 dutyTaxFeeType04) {
    this.dutyTaxFeeType04 = dutyTaxFeeType04;
  }


  public C668 dutytaxfeeRate05(String dutytaxfeeRate05) {
    
    this.dutytaxfeeRate05 = dutytaxfeeRate05;
    return this;
  }

   /**
   * Get dutytaxfeeRate05
   * @return dutytaxfeeRate05
  **/
  @javax.annotation.Nullable

  public String getDutytaxfeeRate05() {
    return dutytaxfeeRate05;
  }


  public void setDutytaxfeeRate05(String dutytaxfeeRate05) {
    this.dutytaxfeeRate05 = dutytaxfeeRate05;
  }


  public C668 currency06(EDIFACTID6345 currency06) {
    
    this.currency06 = currency06;
    return this;
  }

   /**
   * Get currency06
   * @return currency06
  **/
  @javax.annotation.Nullable

  public EDIFACTID6345 getCurrency06() {
    return currency06;
  }


  public void setCurrency06(EDIFACTID6345 currency06) {
    this.currency06 = currency06;
  }


  public C668 dutyTaxFeeType07(EDIFACTID5153 dutyTaxFeeType07) {
    
    this.dutyTaxFeeType07 = dutyTaxFeeType07;
    return this;
  }

   /**
   * Get dutyTaxFeeType07
   * @return dutyTaxFeeType07
  **/
  @javax.annotation.Nullable

  public EDIFACTID5153 getDutyTaxFeeType07() {
    return dutyTaxFeeType07;
  }


  public void setDutyTaxFeeType07(EDIFACTID5153 dutyTaxFeeType07) {
    this.dutyTaxFeeType07 = dutyTaxFeeType07;
  }


  public C668 monetaryAmount08(String monetaryAmount08) {
    
    this.monetaryAmount08 = monetaryAmount08;
    return this;
  }

   /**
   * Get monetaryAmount08
   * @return monetaryAmount08
  **/
  @javax.annotation.Nullable

  public String getMonetaryAmount08() {
    return monetaryAmount08;
  }


  public void setMonetaryAmount08(String monetaryAmount08) {
    this.monetaryAmount08 = monetaryAmount08;
  }


  public C668 monetaryFunction09(EDIFACTID5007 monetaryFunction09) {
    
    this.monetaryFunction09 = monetaryFunction09;
    return this;
  }

   /**
   * Get monetaryFunction09
   * @return monetaryFunction09
  **/
  @javax.annotation.Nullable

  public EDIFACTID5007 getMonetaryFunction09() {
    return monetaryFunction09;
  }


  public void setMonetaryFunction09(EDIFACTID5007 monetaryFunction09) {
    this.monetaryFunction09 = monetaryFunction09;
  }


  public C668 monetaryFunction10(EDIFACTID5007 monetaryFunction10) {
    
    this.monetaryFunction10 = monetaryFunction10;
    return this;
  }

   /**
   * Get monetaryFunction10
   * @return monetaryFunction10
  **/
  @javax.annotation.Nullable

  public EDIFACTID5007 getMonetaryFunction10() {
    return monetaryFunction10;
  }


  public void setMonetaryFunction10(EDIFACTID5007 monetaryFunction10) {
    this.monetaryFunction10 = monetaryFunction10;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C668 C668 = (C668) o;
    return Objects.equals(this.dutytaxfeeRate01, C668.dutytaxfeeRate01) &&
        Objects.equals(this.country02, C668.country02) &&
        Objects.equals(this.currency03, C668.currency03) &&
        Objects.equals(this.dutyTaxFeeType04, C668.dutyTaxFeeType04) &&
        Objects.equals(this.dutytaxfeeRate05, C668.dutytaxfeeRate05) &&
        Objects.equals(this.currency06, C668.currency06) &&
        Objects.equals(this.dutyTaxFeeType07, C668.dutyTaxFeeType07) &&
        Objects.equals(this.monetaryAmount08, C668.monetaryAmount08) &&
        Objects.equals(this.monetaryFunction09, C668.monetaryFunction09) &&
        Objects.equals(this.monetaryFunction10, C668.monetaryFunction10);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dutytaxfeeRate01, country02, currency03, dutyTaxFeeType04, dutytaxfeeRate05, currency06, dutyTaxFeeType07, monetaryAmount08, monetaryFunction09, monetaryFunction10);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C668 {\n");
    sb.append("    dutytaxfeeRate01: ").append(toIndentedString(dutytaxfeeRate01)).append("\n");
    sb.append("    country02: ").append(toIndentedString(country02)).append("\n");
    sb.append("    currency03: ").append(toIndentedString(currency03)).append("\n");
    sb.append("    dutyTaxFeeType04: ").append(toIndentedString(dutyTaxFeeType04)).append("\n");
    sb.append("    dutytaxfeeRate05: ").append(toIndentedString(dutytaxfeeRate05)).append("\n");
    sb.append("    currency06: ").append(toIndentedString(currency06)).append("\n");
    sb.append("    dutyTaxFeeType07: ").append(toIndentedString(dutyTaxFeeType07)).append("\n");
    sb.append("    monetaryAmount08: ").append(toIndentedString(monetaryAmount08)).append("\n");
    sb.append("    monetaryFunction09: ").append(toIndentedString(monetaryFunction09)).append("\n");
    sb.append("    monetaryFunction10: ").append(toIndentedString(monetaryFunction10)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DutytaxfeeRate_01");
    openapiFields.add("Country_02");
    openapiFields.add("Currency_03");
    openapiFields.add("DutyTaxFeeType_04");
    openapiFields.add("DutytaxfeeRate_05");
    openapiFields.add("Currency_06");
    openapiFields.add("DutyTaxFeeType_07");
    openapiFields.add("MonetaryAmount_08");
    openapiFields.add("MonetaryFunction_09");
    openapiFields.add("MonetaryFunction_10");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C668
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C668.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C668 is not found in the empty JSON string", C668.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C668.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C668` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("DutytaxfeeRate_01") != null && !jsonObj.get("DutytaxfeeRate_01").isJsonNull()) && !jsonObj.get("DutytaxfeeRate_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DutytaxfeeRate_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DutytaxfeeRate_01").toString()));
      }
      if ((jsonObj.get("DutytaxfeeRate_05") != null && !jsonObj.get("DutytaxfeeRate_05").isJsonNull()) && !jsonObj.get("DutytaxfeeRate_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DutytaxfeeRate_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DutytaxfeeRate_05").toString()));
      }
      if ((jsonObj.get("MonetaryAmount_08") != null && !jsonObj.get("MonetaryAmount_08").isJsonNull()) && !jsonObj.get("MonetaryAmount_08").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MonetaryAmount_08` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MonetaryAmount_08").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C668.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C668' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C668> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C668.class));

       return (TypeAdapter<T>) new TypeAdapter<C668>() {
           @Override
           public void write(JsonWriter out, C668 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C668 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C668 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C668
  * @throws IOException if the JSON string is invalid with respect to C668
  */
  public static C668 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C668.class);
  }

 /**
  * Convert an instance of C668 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

