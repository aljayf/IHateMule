/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID5463;
import org.openapitools.client.model.EDIFACTID6411;
import org.openapitools.client.model.EDIFACTID7365;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C675
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C675 {
  public static final String SERIALIZED_NAME_QUANTITY01 = "Quantity_01";
  @SerializedName(SERIALIZED_NAME_QUANTITY01)
  private String quantity01;

  public static final String SERIALIZED_NAME_MEASUREMENT_VALUE02 = "MeasurementValue_02";
  @SerializedName(SERIALIZED_NAME_MEASUREMENT_VALUE02)
  private String measurementValue02;

  public static final String SERIALIZED_NAME_ALLOWANCE_OR_CHARGE_QUALIFIER03 = "AllowanceOrChargeQualifier_03";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE_OR_CHARGE_QUALIFIER03)
  private EDIFACTID5463 allowanceOrChargeQualifier03;

  public static final String SERIALIZED_NAME_MEASURE_UNIT_QUALIFIER04 = "MeasureUnitQualifier_04";
  @SerializedName(SERIALIZED_NAME_MEASURE_UNIT_QUALIFIER04)
  private EDIFACTID6411 measureUnitQualifier04;

  public static final String SERIALIZED_NAME_PROCESSING_INDICATOR05 = "ProcessingIndicator_05";
  @SerializedName(SERIALIZED_NAME_PROCESSING_INDICATOR05)
  private EDIFACTID7365 processingIndicator05;

  public C675() {
  }

  public C675 quantity01(String quantity01) {
    
    this.quantity01 = quantity01;
    return this;
  }

   /**
   * Get quantity01
   * @return quantity01
  **/
  @javax.annotation.Nullable

  public String getQuantity01() {
    return quantity01;
  }


  public void setQuantity01(String quantity01) {
    this.quantity01 = quantity01;
  }


  public C675 measurementValue02(String measurementValue02) {
    
    this.measurementValue02 = measurementValue02;
    return this;
  }

   /**
   * Get measurementValue02
   * @return measurementValue02
  **/
  @javax.annotation.Nullable

  public String getMeasurementValue02() {
    return measurementValue02;
  }


  public void setMeasurementValue02(String measurementValue02) {
    this.measurementValue02 = measurementValue02;
  }


  public C675 allowanceOrChargeQualifier03(EDIFACTID5463 allowanceOrChargeQualifier03) {
    
    this.allowanceOrChargeQualifier03 = allowanceOrChargeQualifier03;
    return this;
  }

   /**
   * Get allowanceOrChargeQualifier03
   * @return allowanceOrChargeQualifier03
  **/
  @javax.annotation.Nullable

  public EDIFACTID5463 getAllowanceOrChargeQualifier03() {
    return allowanceOrChargeQualifier03;
  }


  public void setAllowanceOrChargeQualifier03(EDIFACTID5463 allowanceOrChargeQualifier03) {
    this.allowanceOrChargeQualifier03 = allowanceOrChargeQualifier03;
  }


  public C675 measureUnitQualifier04(EDIFACTID6411 measureUnitQualifier04) {
    
    this.measureUnitQualifier04 = measureUnitQualifier04;
    return this;
  }

   /**
   * Get measureUnitQualifier04
   * @return measureUnitQualifier04
  **/
  @javax.annotation.Nullable

  public EDIFACTID6411 getMeasureUnitQualifier04() {
    return measureUnitQualifier04;
  }


  public void setMeasureUnitQualifier04(EDIFACTID6411 measureUnitQualifier04) {
    this.measureUnitQualifier04 = measureUnitQualifier04;
  }


  public C675 processingIndicator05(EDIFACTID7365 processingIndicator05) {
    
    this.processingIndicator05 = processingIndicator05;
    return this;
  }

   /**
   * Get processingIndicator05
   * @return processingIndicator05
  **/
  @javax.annotation.Nullable

  public EDIFACTID7365 getProcessingIndicator05() {
    return processingIndicator05;
  }


  public void setProcessingIndicator05(EDIFACTID7365 processingIndicator05) {
    this.processingIndicator05 = processingIndicator05;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C675 C675 = (C675) o;
    return Objects.equals(this.quantity01, C675.quantity01) &&
        Objects.equals(this.measurementValue02, C675.measurementValue02) &&
        Objects.equals(this.allowanceOrChargeQualifier03, C675.allowanceOrChargeQualifier03) &&
        Objects.equals(this.measureUnitQualifier04, C675.measureUnitQualifier04) &&
        Objects.equals(this.processingIndicator05, C675.processingIndicator05);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity01, measurementValue02, allowanceOrChargeQualifier03, measureUnitQualifier04, processingIndicator05);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C675 {\n");
    sb.append("    quantity01: ").append(toIndentedString(quantity01)).append("\n");
    sb.append("    measurementValue02: ").append(toIndentedString(measurementValue02)).append("\n");
    sb.append("    allowanceOrChargeQualifier03: ").append(toIndentedString(allowanceOrChargeQualifier03)).append("\n");
    sb.append("    measureUnitQualifier04: ").append(toIndentedString(measureUnitQualifier04)).append("\n");
    sb.append("    processingIndicator05: ").append(toIndentedString(processingIndicator05)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Quantity_01");
    openapiFields.add("MeasurementValue_02");
    openapiFields.add("AllowanceOrChargeQualifier_03");
    openapiFields.add("MeasureUnitQualifier_04");
    openapiFields.add("ProcessingIndicator_05");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C675
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C675.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C675 is not found in the empty JSON string", C675.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C675.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C675` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Quantity_01") != null && !jsonObj.get("Quantity_01").isJsonNull()) && !jsonObj.get("Quantity_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quantity_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quantity_01").toString()));
      }
      if ((jsonObj.get("MeasurementValue_02") != null && !jsonObj.get("MeasurementValue_02").isJsonNull()) && !jsonObj.get("MeasurementValue_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MeasurementValue_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MeasurementValue_02").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C675.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C675' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C675> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C675.class));

       return (TypeAdapter<T>) new TypeAdapter<C675>() {
           @Override
           public void write(JsonWriter out, C675 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C675 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C675 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C675
  * @throws IOException if the JSON string is invalid with respect to C675
  */
  public static C675 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C675.class);
  }

 /**
  * Convert an instance of C675 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

