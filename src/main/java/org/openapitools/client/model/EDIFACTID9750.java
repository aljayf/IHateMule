/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EDIFACT_ID_9750
 */
@JsonAdapter(EDIFACTID9750.Adapter.class)
public enum EDIFACTID9750 {
  
  _0("0"),
  
  _1("1"),
  
  _12C("12C"),
  
  _1ST("1ST"),
  
  _2("2"),
  
  _2ND("2ND"),
  
  _3("3"),
  
  _3RD("3RD"),
  
  _4("4"),
  
  _5("5"),
  
  _6("6"),
  
  _7("7"),
  
  _700("700"),
  
  _701("701"),
  
  _702("702"),
  
  _703("703"),
  
  _704("704"),
  
  _705("705"),
  
  _706("706"),
  
  _707("707"),
  
  _708("708"),
  
  _709("709"),
  
  _710("710"),
  
  _711("711"),
  
  _712("712"),
  
  _713("713"),
  
  _714("714"),
  
  _715("715"),
  
  _716("716"),
  
  _717("717"),
  
  _718("718"),
  
  _719("719"),
  
  _720("720"),
  
  _721("721"),
  
  _722("722"),
  
  _723("723"),
  
  _724("724"),
  
  _725("725"),
  
  _726("726"),
  
  _727("727"),
  
  _728("728"),
  
  _729("729"),
  
  _730("730"),
  
  _731("731"),
  
  _732("732"),
  
  _733("733"),
  
  _734("734"),
  
  _735("735"),
  
  _736("736"),
  
  _737("737"),
  
  _738("738"),
  
  _739("739"),
  
  _740("740"),
  
  _741("741"),
  
  _742("742"),
  
  _743("743"),
  
  _744("744"),
  
  _745("745"),
  
  _746("746"),
  
  _747("747"),
  
  _748("748"),
  
  _749("749"),
  
  _750("750"),
  
  _751("751"),
  
  _752("752"),
  
  _753("753"),
  
  _754("754"),
  
  _755("755"),
  
  _756("756"),
  
  _757("757"),
  
  _758("758"),
  
  _759("759"),
  
  _760("760"),
  
  _761("761"),
  
  _762("762"),
  
  _763("763"),
  
  _764("764"),
  
  _765("765"),
  
  _766("766"),
  
  _767("767"),
  
  _768("768"),
  
  _769("769"),
  
  _770("770"),
  
  _771("771"),
  
  _772("772"),
  
  _773("773"),
  
  _774("774"),
  
  _775("775"),
  
  AA("AA"),
  
  AB("AB"),
  
  ABA("ABA"),
  
  ABD("ABD"),
  
  AC("AC"),
  
  AD("AD"),
  
  ADC("ADC"),
  
  AE("AE"),
  
  AF("AF"),
  
  AG("AG"),
  
  AH("AH"),
  
  AI("AI"),
  
  AJ("AJ"),
  
  AK("AK"),
  
  AL("AL"),
  
  AM("AM"),
  
  AN("AN"),
  
  AO("AO"),
  
  AP("AP"),
  
  AQ("AQ"),
  
  AR("AR"),
  
  AS("AS"),
  
  AT("AT"),
  
  ATC("ATC"),
  
  AU("AU"),
  
  AV("AV"),
  
  AW("AW"),
  
  AX("AX"),
  
  AY("AY"),
  
  AZ("AZ"),
  
  BA("BA"),
  
  BAG("BAG"),
  
  BB("BB"),
  
  BC("BC"),
  
  BCL("BCL"),
  
  BD("BD"),
  
  BE("BE"),
  
  BEN("BEN"),
  
  BF("BF"),
  
  BG("BG"),
  
  BH("BH"),
  
  BI("BI"),
  
  BJ("BJ"),
  
  BK("BK"),
  
  BL("BL"),
  
  BM("BM"),
  
  BN("BN"),
  
  BO("BO"),
  
  BP("BP"),
  
  BQ("BQ"),
  
  BR("BR"),
  
  BS("BS"),
  
  BST("BST"),
  
  BT("BT"),
  
  BU("BU"),
  
  BUS("BUS"),
  
  BV("BV"),
  
  BW("BW"),
  
  BX("BX"),
  
  BY("BY"),
  
  BZ("BZ"),
  
  CA("CA"),
  
  CB("CB"),
  
  CC("CC"),
  
  CD("CD"),
  
  CE("CE"),
  
  CF("CF"),
  
  CG("CG"),
  
  CGT("CGT"),
  
  CH("CH"),
  
  CHC("CHC"),
  
  CHK("CHK"),
  
  CI("CI"),
  
  CJ("CJ"),
  
  CK("CK"),
  
  CL("CL"),
  
  CM("CM"),
  
  CN("CN"),
  
  CO("CO"),
  
  CP("CP"),
  
  CQ("CQ"),
  
  CRD("CRD"),
  
  CTO("CTO"),
  
  DCL("DCL"),
  
  DEL("DEL"),
  
  DIC("DIC"),
  
  DIS("DIS"),
  
  DIV("DIV"),
  
  DOP("DOP"),
  
  EAR("EAR"),
  
  ENG("ENG"),
  
  FBG("FBG"),
  
  FCL("FCL"),
  
  FCT("FCT"),
  
  FIN("FIN"),
  
  FIR("FIR"),
  
  FND("FND"),
  
  FST("FST"),
  
  GCL("GCL"),
  
  GFR("GFR"),
  
  GRD("GRD"),
  
  GTG("GTG"),
  
  GTO("GTO"),
  
  HEN("HEN"),
  
  HST("HST"),
  
  JET("JET"),
  
  LAN("LAN"),
  
  LBG("LBG"),
  
  MND("MND"),
  
  MST("MST"),
  
  MZC("MZC"),
  
  MZO("MZO"),
  
  NAA("NAA"),
  
  NAB("NAB"),
  
  NAC("NAC"),
  
  NAD("NAD"),
  
  NAE("NAE"),
  
  NAF("NAF"),
  
  NAG("NAG"),
  
  NAH("NAH"),
  
  NAI("NAI"),
  
  NAJ("NAJ"),
  
  NAK("NAK"),
  
  NAL("NAL"),
  
  NAM("NAM"),
  
  NAN("NAN"),
  
  NAO("NAO"),
  
  NAP("NAP"),
  
  NAQ("NAQ"),
  
  NAR("NAR"),
  
  NAS("NAS"),
  
  NAT("NAT"),
  
  NAU("NAU"),
  
  NAV("NAV"),
  
  NAW("NAW"),
  
  NAX("NAX"),
  
  NAY("NAY"),
  
  NAZ("NAZ"),
  
  NBA("NBA"),
  
  NBB("NBB"),
  
  NBC("NBC"),
  
  NBD("NBD"),
  
  NBE("NBE"),
  
  NBF("NBF"),
  
  NBG("NBG"),
  
  NBH("NBH"),
  
  NBI("NBI"),
  
  NBJ("NBJ"),
  
  NBK("NBK"),
  
  NBL("NBL"),
  
  NBM("NBM"),
  
  NBN("NBN"),
  
  NBO("NBO"),
  
  NBP("NBP"),
  
  NBQ("NBQ"),
  
  NBR("NBR"),
  
  NBS("NBS"),
  
  NBT("NBT"),
  
  NBU("NBU"),
  
  NBV("NBV"),
  
  NBW("NBW"),
  
  NBX("NBX"),
  
  NBY("NBY"),
  
  NBZ("NBZ"),
  
  NCA("NCA"),
  
  NCB("NCB"),
  
  NCC("NCC"),
  
  NCD("NCD"),
  
  NCE("NCE"),
  
  NCF("NCF"),
  
  NCG("NCG"),
  
  NCH("NCH"),
  
  NCI("NCI"),
  
  NCJ("NCJ"),
  
  NCK("NCK"),
  
  NCL("NCL"),
  
  NCM("NCM"),
  
  NCN("NCN"),
  
  NCO("NCO"),
  
  NCP("NCP"),
  
  NCQ("NCQ"),
  
  OFB("OFB"),
  
  OFS("OFS"),
  
  ONB("ONB"),
  
  ONS("ONS"),
  
  P1("P1"),
  
  P10("P10"),
  
  P2("P2"),
  
  P3("P3"),
  
  P4("P4"),
  
  P5("P5"),
  
  P6("P6"),
  
  P7("P7"),
  
  PBK("PBK"),
  
  RDT("RDT"),
  
  RFA("RFA"),
  
  RST("RST"),
  
  SAT("SAT"),
  
  SCT("SCT"),
  
  SPE("SPE"),
  
  SRT("SRT"),
  
  STK("STK"),
  
  TDN("TDN"),
  
  TDP("TDP"),
  
  TEN("TEN"),
  
  THM("THM"),
  
  TKO("TKO"),
  
  UNS("UNS"),
  
  WAB("WAB");

  private String value;

  EDIFACTID9750(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EDIFACTID9750 fromValue(String value) {
    for (EDIFACTID9750 b : EDIFACTID9750.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EDIFACTID9750> {
    @Override
    public void write(final JsonWriter jsonWriter, final EDIFACTID9750 enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EDIFACTID9750 read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EDIFACTID9750.fromValue(value);
    }
  }
}

