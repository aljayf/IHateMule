/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.FCC;
import org.openapitools.client.model.FRU;
import org.openapitools.client.model.ITM;
import org.openapitools.client.model.Loop9TKTREQ;
import org.openapitools.client.model.MON;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.PTS;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop8TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop8TKTREQ {
  public static final String SERIALIZED_NAME_I_T_M = "ITM";
  @SerializedName(SERIALIZED_NAME_I_T_M)
  private ITM itm;

  public static final String SERIALIZED_NAME_LOOP9 = "Loop9";
  @SerializedName(SERIALIZED_NAME_LOOP9)
  private List<Loop9TKTREQ> loop9;

  public static final String SERIALIZED_NAME_M_O_N = "MON";
  @SerializedName(SERIALIZED_NAME_M_O_N)
  private MON mon;

  public static final String SERIALIZED_NAME_P_T_S = "PTS";
  @SerializedName(SERIALIZED_NAME_P_T_S)
  private PTS pts;

  public static final String SERIALIZED_NAME_F_C_C = "FCC";
  @SerializedName(SERIALIZED_NAME_F_C_C)
  private FCC fcc;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_F_R_U = "FRU";
  @SerializedName(SERIALIZED_NAME_F_R_U)
  private FRU fru;

  public Loop8TKTREQ() {
  }

  public Loop8TKTREQ itm(ITM itm) {
    
    this.itm = itm;
    return this;
  }

   /**
   * Get itm
   * @return itm
  **/
  @javax.annotation.Nonnull

  public ITM getITM() {
    return itm;
  }


  public void setITM(ITM itm) {
    this.itm = itm;
  }


  public Loop8TKTREQ loop9(List<Loop9TKTREQ> loop9) {
    
    this.loop9 = loop9;
    return this;
  }

  public Loop8TKTREQ addLoop9Item(Loop9TKTREQ loop9Item) {
    if (this.loop9 == null) {
      this.loop9 = new ArrayList<>();
    }
    this.loop9.add(loop9Item);
    return this;
  }

   /**
   * Get loop9
   * @return loop9
  **/
  @javax.annotation.Nullable

  public List<Loop9TKTREQ> getLoop9() {
    return loop9;
  }


  public void setLoop9(List<Loop9TKTREQ> loop9) {
    this.loop9 = loop9;
  }


  public Loop8TKTREQ mon(MON mon) {
    
    this.mon = mon;
    return this;
  }

   /**
   * Get mon
   * @return mon
  **/
  @javax.annotation.Nullable

  public MON getMON() {
    return mon;
  }


  public void setMON(MON mon) {
    this.mon = mon;
  }


  public Loop8TKTREQ pts(PTS pts) {
    
    this.pts = pts;
    return this;
  }

   /**
   * Get pts
   * @return pts
  **/
  @javax.annotation.Nullable

  public PTS getPTS() {
    return pts;
  }


  public void setPTS(PTS pts) {
    this.pts = pts;
  }


  public Loop8TKTREQ fcc(FCC fcc) {
    
    this.fcc = fcc;
    return this;
  }

   /**
   * Get fcc
   * @return fcc
  **/
  @javax.annotation.Nullable

  public FCC getFCC() {
    return fcc;
  }


  public void setFCC(FCC fcc) {
    this.fcc = fcc;
  }


  public Loop8TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nonnull

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop8TKTREQ fru(FRU fru) {
    
    this.fru = fru;
    return this;
  }

   /**
   * Get fru
   * @return fru
  **/
  @javax.annotation.Nullable

  public FRU getFRU() {
    return fru;
  }


  public void setFRU(FRU fru) {
    this.fru = fru;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop8TKTREQ loop8TKTREQ = (Loop8TKTREQ) o;
    return Objects.equals(this.itm, loop8TKTREQ.itm) &&
        Objects.equals(this.loop9, loop8TKTREQ.loop9) &&
        Objects.equals(this.mon, loop8TKTREQ.mon) &&
        Objects.equals(this.pts, loop8TKTREQ.pts) &&
        Objects.equals(this.fcc, loop8TKTREQ.fcc) &&
        Objects.equals(this.ptk, loop8TKTREQ.ptk) &&
        Objects.equals(this.fru, loop8TKTREQ.fru);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itm, loop9, mon, pts, fcc, ptk, fru);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop8TKTREQ {\n");
    sb.append("    itm: ").append(toIndentedString(itm)).append("\n");
    sb.append("    loop9: ").append(toIndentedString(loop9)).append("\n");
    sb.append("    mon: ").append(toIndentedString(mon)).append("\n");
    sb.append("    pts: ").append(toIndentedString(pts)).append("\n");
    sb.append("    fcc: ").append(toIndentedString(fcc)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    fru: ").append(toIndentedString(fru)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ITM");
    openapiFields.add("Loop9");
    openapiFields.add("MON");
    openapiFields.add("PTS");
    openapiFields.add("FCC");
    openapiFields.add("PTK");
    openapiFields.add("FRU");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ITM");
    openapiRequiredFields.add("PTK");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop8TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop8TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop8TKTREQ is not found in the empty JSON string", Loop8TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop8TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop8TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop8TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `ITM`
      ITM.validateJsonObject(jsonObj.getAsJsonObject("ITM"));
      if (jsonObj.get("Loop9") != null && !jsonObj.get("Loop9").isJsonNull()) {
        JsonArray jsonArrayloop9 = jsonObj.getAsJsonArray("Loop9");
        if (jsonArrayloop9 != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Loop9").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Loop9` to be an array in the JSON string but got `%s`", jsonObj.get("Loop9").toString()));
          }

          // validate the optional field `Loop9` (array)
          for (int i = 0; i < jsonArrayloop9.size(); i++) {
            Loop9TKTREQ.validateJsonObject(jsonArrayloop9.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `MON`
      if (jsonObj.get("MON") != null && !jsonObj.get("MON").isJsonNull()) {
        MON.validateJsonObject(jsonObj.getAsJsonObject("MON"));
      }
      // validate the optional field `PTS`
      if (jsonObj.get("PTS") != null && !jsonObj.get("PTS").isJsonNull()) {
        PTS.validateJsonObject(jsonObj.getAsJsonObject("PTS"));
      }
      // validate the optional field `FCC`
      if (jsonObj.get("FCC") != null && !jsonObj.get("FCC").isJsonNull()) {
        FCC.validateJsonObject(jsonObj.getAsJsonObject("FCC"));
      }
      // validate the required field `PTK`
      PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      // validate the optional field `FRU`
      if (jsonObj.get("FRU") != null && !jsonObj.get("FRU").isJsonNull()) {
        FRU.validateJsonObject(jsonObj.getAsJsonObject("FRU"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop8TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop8TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop8TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop8TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop8TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop8TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop8TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop8TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop8TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop8TKTREQ
  */
  public static Loop8TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop8TKTREQ.class);
  }

 /**
  * Convert an instance of Loop8TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

