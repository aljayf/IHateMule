/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EDIFACT_ID_7365
 */
@JsonAdapter(EDIFACTID7365.Adapter.class)
public enum EDIFACTID7365 {
  
  _1("1"),
  
  _2("2"),
  
  _700("700"),
  
  _701("701"),
  
  _702("702"),
  
  _703("703"),
  
  _704("704"),
  
  _705("705"),
  
  _706("706"),
  
  _707("707"),
  
  _708("708"),
  
  _709("709"),
  
  _710("710"),
  
  _711("711"),
  
  _712("712"),
  
  _7SR("7SR"),
  
  _7TR("7TR"),
  
  ACK("ACK"),
  
  AEA("AEA"),
  
  AF("AF"),
  
  AI("AI"),
  
  AT("AT"),
  
  B("B"),
  
  BS("BS"),
  
  C("C"),
  
  CD("CD"),
  
  CM1("CM1"),
  
  CN("CN"),
  
  CP2("CP2"),
  
  CR("CR"),
  
  CY("CY"),
  
  DP("DP"),
  
  EC("EC"),
  
  EI("EI"),
  
  EW("EW"),
  
  F("F"),
  
  FA("FA"),
  
  FE("FE"),
  
  FN("FN"),
  
  FT("FT"),
  
  FY("FY"),
  
  GC("GC"),
  
  HP("HP"),
  
  J("J"),
  
  MH("MH"),
  
  MI("MI"),
  
  MP("MP"),
  
  MPP("MPP"),
  
  N("N"),
  
  NB("NB"),
  
  NP("NP"),
  
  NS("NS"),
  
  P("P"),
  
  PA("PA"),
  
  PC("PC"),
  
  PI("PI"),
  
  PP("PP"),
  
  PS("PS"),
  
  PT("PT"),
  
  R("R"),
  
  RD("RD"),
  
  SA("SA"),
  
  SS("SS"),
  
  T("T"),
  
  TF("TF"),
  
  TP("TP"),
  
  VI("VI"),
  
  Y("Y"),
  
  YP("YP");

  private String value;

  EDIFACTID7365(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EDIFACTID7365 fromValue(String value) {
    for (EDIFACTID7365 b : EDIFACTID7365.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EDIFACTID7365> {
    @Override
    public void write(final JsonWriter jsonWriter, final EDIFACTID7365 enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EDIFACTID7365 read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EDIFACTID7365.fromValue(value);
    }
  }
}

