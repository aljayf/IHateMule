/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.APD;
import org.openapitools.client.model.ASG;
import org.openapitools.client.model.CPN;
import org.openapitools.client.model.CVR;
import org.openapitools.client.model.DAT;
import org.openapitools.client.model.EBD;
import org.openapitools.client.model.FAR;
import org.openapitools.client.model.FTI;
import org.openapitools.client.model.IFT;
import org.openapitools.client.model.PTK;
import org.openapitools.client.model.PTS;
import org.openapitools.client.model.RCI;
import org.openapitools.client.model.RPI;
import org.openapitools.client.model.SSR;
import org.openapitools.client.model.TVL;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop5TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop5TKTREQ {
  public static final String SERIALIZED_NAME_C_P_N = "CPN";
  @SerializedName(SERIALIZED_NAME_C_P_N)
  private CPN cpn;

  public static final String SERIALIZED_NAME_T_V_L = "TVL";
  @SerializedName(SERIALIZED_NAME_T_V_L)
  private List<TVL> TVL;

  public static final String SERIALIZED_NAME_R_C_I = "RCI";
  @SerializedName(SERIALIZED_NAME_R_C_I)
  private RCI rci;

  public static final String SERIALIZED_NAME_R_P_I = "RPI";
  @SerializedName(SERIALIZED_NAME_R_P_I)
  private RPI rpi;

  public static final String SERIALIZED_NAME_P_T_S = "PTS";
  @SerializedName(SERIALIZED_NAME_P_T_S)
  private PTS pts;

  public static final String SERIALIZED_NAME_E_B_D = "EBD";
  @SerializedName(SERIALIZED_NAME_E_B_D)
  private List<EBD> EBD;

  public static final String SERIALIZED_NAME_F_T_I = "FTI";
  @SerializedName(SERIALIZED_NAME_F_T_I)
  private FTI fti;

  public static final String SERIALIZED_NAME_D_A_T = "DAT";
  @SerializedName(SERIALIZED_NAME_D_A_T)
  private DAT dat;

  public static final String SERIALIZED_NAME_I_F_T = "IFT";
  @SerializedName(SERIALIZED_NAME_I_F_T)
  private List<IFT> IFT;

  public static final String SERIALIZED_NAME_P_T_K = "PTK";
  @SerializedName(SERIALIZED_NAME_P_T_K)
  private PTK ptk;

  public static final String SERIALIZED_NAME_F_A_R = "FAR";
  @SerializedName(SERIALIZED_NAME_F_A_R)
  private FAR far;

  public static final String SERIALIZED_NAME_C_V_R = "CVR";
  @SerializedName(SERIALIZED_NAME_C_V_R)
  private CVR cvr;

  public static final String SERIALIZED_NAME_A_P_D = "APD";
  @SerializedName(SERIALIZED_NAME_A_P_D)
  private APD apd;

  public static final String SERIALIZED_NAME_S_S_R = "SSR";
  @SerializedName(SERIALIZED_NAME_S_S_R)
  private SSR ssr;

  public static final String SERIALIZED_NAME_A_S_G = "ASG";
  @SerializedName(SERIALIZED_NAME_A_S_G)
  private ASG asg;

  public Loop5TKTREQ() {
  }

  public Loop5TKTREQ cpn(CPN cpn) {
    
    this.cpn = cpn;
    return this;
  }

   /**
   * Get cpn
   * @return cpn
  **/
  @javax.annotation.Nonnull

  public CPN getCPN() {
    return cpn;
  }


  public void setCPN(CPN cpn) {
    this.cpn = cpn;
  }


  public Loop5TKTREQ TVL(List<TVL> TVL) {
    
    this.TVL = TVL;
    return this;
  }

  public Loop5TKTREQ addTVLItem(TVL TVLItem) {
    if (this.TVL == null) {
      this.TVL = new ArrayList<>();
    }
    this.TVL.add(TVLItem);
    return this;
  }

   /**
   * Get TVL
   * @return TVL
  **/
  @javax.annotation.Nullable

  public List<TVL> getTVL() {
    return TVL;
  }


  public void setTVL(List<TVL> TVL) {
    this.TVL = TVL;
  }


  public Loop5TKTREQ rci(RCI rci) {
    
    this.rci = rci;
    return this;
  }

   /**
   * Get rci
   * @return rci
  **/
  @javax.annotation.Nullable

  public RCI getRCI() {
    return rci;
  }


  public void setRCI(RCI rci) {
    this.rci = rci;
  }


  public Loop5TKTREQ rpi(RPI rpi) {
    
    this.rpi = rpi;
    return this;
  }

   /**
   * Get rpi
   * @return rpi
  **/
  @javax.annotation.Nullable

  public RPI getRPI() {
    return rpi;
  }


  public void setRPI(RPI rpi) {
    this.rpi = rpi;
  }


  public Loop5TKTREQ pts(PTS pts) {
    
    this.pts = pts;
    return this;
  }

   /**
   * Get pts
   * @return pts
  **/
  @javax.annotation.Nullable

  public PTS getPTS() {
    return pts;
  }


  public void setPTS(PTS pts) {
    this.pts = pts;
  }


  public Loop5TKTREQ EBD(List<EBD> EBD) {
    
    this.EBD = EBD;
    return this;
  }

  public Loop5TKTREQ addEBDItem(EBD EBDItem) {
    if (this.EBD == null) {
      this.EBD = new ArrayList<>();
    }
    this.EBD.add(EBDItem);
    return this;
  }

   /**
   * Get EBD
   * @return EBD
  **/
  @javax.annotation.Nullable

  public List<EBD> getEBD() {
    return EBD;
  }


  public void setEBD(List<EBD> EBD) {
    this.EBD = EBD;
  }


  public Loop5TKTREQ fti(FTI fti) {
    
    this.fti = fti;
    return this;
  }

   /**
   * Get fti
   * @return fti
  **/
  @javax.annotation.Nullable

  public FTI getFTI() {
    return fti;
  }


  public void setFTI(FTI fti) {
    this.fti = fti;
  }


  public Loop5TKTREQ dat(DAT dat) {
    
    this.dat = dat;
    return this;
  }

   /**
   * Get dat
   * @return dat
  **/
  @javax.annotation.Nullable

  public DAT getDAT() {
    return dat;
  }


  public void setDAT(DAT dat) {
    this.dat = dat;
  }


  public Loop5TKTREQ IFT(List<IFT> IFT) {
    
    this.IFT = IFT;
    return this;
  }

  public Loop5TKTREQ addIFTItem(IFT IFTItem) {
    if (this.IFT == null) {
      this.IFT = new ArrayList<>();
    }
    this.IFT.add(IFTItem);
    return this;
  }

   /**
   * Get IFT
   * @return IFT
  **/
  @javax.annotation.Nullable

  public List<IFT> getIFT() {
    return IFT;
  }


  public void setIFT(List<IFT> IFT) {
    this.IFT = IFT;
  }


  public Loop5TKTREQ ptk(PTK ptk) {
    
    this.ptk = ptk;
    return this;
  }

   /**
   * Get ptk
   * @return ptk
  **/
  @javax.annotation.Nullable

  public PTK getPTK() {
    return ptk;
  }


  public void setPTK(PTK ptk) {
    this.ptk = ptk;
  }


  public Loop5TKTREQ far(FAR far) {
    
    this.far = far;
    return this;
  }

   /**
   * Get far
   * @return far
  **/
  @javax.annotation.Nullable

  public FAR getFAR() {
    return far;
  }


  public void setFAR(FAR far) {
    this.far = far;
  }


  public Loop5TKTREQ cvr(CVR cvr) {
    
    this.cvr = cvr;
    return this;
  }

   /**
   * Get cvr
   * @return cvr
  **/
  @javax.annotation.Nullable

  public CVR getCVR() {
    return cvr;
  }


  public void setCVR(CVR cvr) {
    this.cvr = cvr;
  }


  public Loop5TKTREQ apd(APD apd) {
    
    this.apd = apd;
    return this;
  }

   /**
   * Get apd
   * @return apd
  **/
  @javax.annotation.Nullable

  public APD getAPD() {
    return apd;
  }


  public void setAPD(APD apd) {
    this.apd = apd;
  }


  public Loop5TKTREQ ssr(SSR ssr) {
    
    this.ssr = ssr;
    return this;
  }

   /**
   * Get ssr
   * @return ssr
  **/
  @javax.annotation.Nullable

  public SSR getSSR() {
    return ssr;
  }


  public void setSSR(SSR ssr) {
    this.ssr = ssr;
  }


  public Loop5TKTREQ asg(ASG asg) {
    
    this.asg = asg;
    return this;
  }

   /**
   * Get asg
   * @return asg
  **/
  @javax.annotation.Nullable

  public ASG getASG() {
    return asg;
  }


  public void setASG(ASG asg) {
    this.asg = asg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop5TKTREQ loop5TKTREQ = (Loop5TKTREQ) o;
    return Objects.equals(this.cpn, loop5TKTREQ.cpn) &&
        Objects.equals(this.TVL, loop5TKTREQ.TVL) &&
        Objects.equals(this.rci, loop5TKTREQ.rci) &&
        Objects.equals(this.rpi, loop5TKTREQ.rpi) &&
        Objects.equals(this.pts, loop5TKTREQ.pts) &&
        Objects.equals(this.EBD, loop5TKTREQ.EBD) &&
        Objects.equals(this.fti, loop5TKTREQ.fti) &&
        Objects.equals(this.dat, loop5TKTREQ.dat) &&
        Objects.equals(this.IFT, loop5TKTREQ.IFT) &&
        Objects.equals(this.ptk, loop5TKTREQ.ptk) &&
        Objects.equals(this.far, loop5TKTREQ.far) &&
        Objects.equals(this.cvr, loop5TKTREQ.cvr) &&
        Objects.equals(this.apd, loop5TKTREQ.apd) &&
        Objects.equals(this.ssr, loop5TKTREQ.ssr) &&
        Objects.equals(this.asg, loop5TKTREQ.asg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpn, TVL, rci, rpi, pts, EBD, fti, dat, IFT, ptk, far, cvr, apd, ssr, asg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop5TKTREQ {\n");
    sb.append("    cpn: ").append(toIndentedString(cpn)).append("\n");
    sb.append("    TVL: ").append(toIndentedString(TVL)).append("\n");
    sb.append("    rci: ").append(toIndentedString(rci)).append("\n");
    sb.append("    rpi: ").append(toIndentedString(rpi)).append("\n");
    sb.append("    pts: ").append(toIndentedString(pts)).append("\n");
    sb.append("    EBD: ").append(toIndentedString(EBD)).append("\n");
    sb.append("    fti: ").append(toIndentedString(fti)).append("\n");
    sb.append("    dat: ").append(toIndentedString(dat)).append("\n");
    sb.append("    IFT: ").append(toIndentedString(IFT)).append("\n");
    sb.append("    ptk: ").append(toIndentedString(ptk)).append("\n");
    sb.append("    far: ").append(toIndentedString(far)).append("\n");
    sb.append("    cvr: ").append(toIndentedString(cvr)).append("\n");
    sb.append("    apd: ").append(toIndentedString(apd)).append("\n");
    sb.append("    ssr: ").append(toIndentedString(ssr)).append("\n");
    sb.append("    asg: ").append(toIndentedString(asg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CPN");
    openapiFields.add("TVL");
    openapiFields.add("RCI");
    openapiFields.add("RPI");
    openapiFields.add("PTS");
    openapiFields.add("EBD");
    openapiFields.add("FTI");
    openapiFields.add("DAT");
    openapiFields.add("IFT");
    openapiFields.add("PTK");
    openapiFields.add("FAR");
    openapiFields.add("CVR");
    openapiFields.add("APD");
    openapiFields.add("SSR");
    openapiFields.add("ASG");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CPN");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop5TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop5TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop5TKTREQ is not found in the empty JSON string", Loop5TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop5TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop5TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop5TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `CPN`
      CPN.validateJsonObject(jsonObj.getAsJsonObject("CPN"));
      if (jsonObj.get("TVL") != null && !jsonObj.get("TVL").isJsonNull()) {
        JsonArray jsonArrayTVL = jsonObj.getAsJsonArray("TVL");
        if (jsonArrayTVL != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TVL").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TVL` to be an array in the JSON string but got `%s`", jsonObj.get("TVL").toString()));
          }

          // validate the optional field `TVL` (array)
          for (int i = 0; i < jsonArrayTVL.size(); i++) {
            TVL.validateJsonObject(jsonArrayTVL.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `RCI`
      if (jsonObj.get("RCI") != null && !jsonObj.get("RCI").isJsonNull()) {
        RCI.validateJsonObject(jsonObj.getAsJsonObject("RCI"));
      }
      // validate the optional field `RPI`
      if (jsonObj.get("RPI") != null && !jsonObj.get("RPI").isJsonNull()) {
        RPI.validateJsonObject(jsonObj.getAsJsonObject("RPI"));
      }
      // validate the optional field `PTS`
      if (jsonObj.get("PTS") != null && !jsonObj.get("PTS").isJsonNull()) {
        PTS.validateJsonObject(jsonObj.getAsJsonObject("PTS"));
      }
      if (jsonObj.get("EBD") != null && !jsonObj.get("EBD").isJsonNull()) {
        JsonArray jsonArrayEBD = jsonObj.getAsJsonArray("EBD");
        if (jsonArrayEBD != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EBD").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EBD` to be an array in the JSON string but got `%s`", jsonObj.get("EBD").toString()));
          }

          // validate the optional field `EBD` (array)
          for (int i = 0; i < jsonArrayEBD.size(); i++) {
            EBD.validateJsonObject(jsonArrayEBD.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `FTI`
      if (jsonObj.get("FTI") != null && !jsonObj.get("FTI").isJsonNull()) {
        FTI.validateJsonObject(jsonObj.getAsJsonObject("FTI"));
      }
      // validate the optional field `DAT`
      if (jsonObj.get("DAT") != null && !jsonObj.get("DAT").isJsonNull()) {
        DAT.validateJsonObject(jsonObj.getAsJsonObject("DAT"));
      }
      if (jsonObj.get("IFT") != null && !jsonObj.get("IFT").isJsonNull()) {
        JsonArray jsonArrayIFT = jsonObj.getAsJsonArray("IFT");
        if (jsonArrayIFT != null) {
          // ensure the json data is an array
          if (!jsonObj.get("IFT").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `IFT` to be an array in the JSON string but got `%s`", jsonObj.get("IFT").toString()));
          }

          // validate the optional field `IFT` (array)
          for (int i = 0; i < jsonArrayIFT.size(); i++) {
            IFT.validateJsonObject(jsonArrayIFT.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `PTK`
      if (jsonObj.get("PTK") != null && !jsonObj.get("PTK").isJsonNull()) {
        PTK.validateJsonObject(jsonObj.getAsJsonObject("PTK"));
      }
      // validate the optional field `FAR`
      if (jsonObj.get("FAR") != null && !jsonObj.get("FAR").isJsonNull()) {
        FAR.validateJsonObject(jsonObj.getAsJsonObject("FAR"));
      }
      // validate the optional field `CVR`
      if (jsonObj.get("CVR") != null && !jsonObj.get("CVR").isJsonNull()) {
        CVR.validateJsonObject(jsonObj.getAsJsonObject("CVR"));
      }
      // validate the optional field `APD`
      if (jsonObj.get("APD") != null && !jsonObj.get("APD").isJsonNull()) {
        APD.validateJsonObject(jsonObj.getAsJsonObject("APD"));
      }
      // validate the optional field `SSR`
      if (jsonObj.get("SSR") != null && !jsonObj.get("SSR").isJsonNull()) {
        SSR.validateJsonObject(jsonObj.getAsJsonObject("SSR"));
      }
      // validate the optional field `ASG`
      if (jsonObj.get("ASG") != null && !jsonObj.get("ASG").isJsonNull()) {
        ASG.validateJsonObject(jsonObj.getAsJsonObject("ASG"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop5TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop5TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop5TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop5TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop5TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop5TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop5TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop5TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop5TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop5TKTREQ
  */
  public static Loop5TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop5TKTREQ.class);
  }

 /**
  * Convert an instance of Loop5TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

