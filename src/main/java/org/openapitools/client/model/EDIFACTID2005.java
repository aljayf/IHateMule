/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets EDIFACT_ID_2005
 */
@JsonAdapter(EDIFACTID2005.Adapter.class)
public enum EDIFACTID2005 {
  
  _1("1"),
  
  _2("2"),
  
  _700("700"),
  
  _701("701"),
  
  _702("702"),
  
  _703("703"),
  
  _704("704"),
  
  _705("705"),
  
  _706("706"),
  
  _707("707"),
  
  _708("708"),
  
  _709("709"),
  
  _710("710"),
  
  _711("711"),
  
  _712("712"),
  
  _713("713"),
  
  _714("714"),
  
  _715("715"),
  
  _716("716"),
  
  A("A"),
  
  AA("AA"),
  
  ACL("ACL"),
  
  ACT("ACT"),
  
  AD("AD"),
  
  AI("AI"),
  
  ALL("ALL"),
  
  ALT("ALT"),
  
  B("B"),
  
  CAL("CAL"),
  
  COL("COL"),
  
  COT("COT"),
  
  DV("DV"),
  
  DX("DX"),
  
  E("E"),
  
  EA("EA"),
  
  EAL("EAL"),
  
  EAT("EAT"),
  
  EB("EB"),
  
  ED("ED"),
  
  EET("EET"),
  
  ENL("ENL"),
  
  ENT("ENT"),
  
  EO("EO"),
  
  ESL("ESL"),
  
  EST("EST"),
  
  EX("EX"),
  
  FLT("FLT"),
  
  FR("FR"),
  
  GRT("GRT"),
  
  HEL("HEL"),
  
  HET("HET"),
  
  HIL("HIL"),
  
  HIT("HIT"),
  
  HNL("HNL"),
  
  HNT("HNT"),
  
  L("L"),
  
  LA("LA"),
  
  LAL("LAL"),
  
  LAT("LAT"),
  
  LT("LT"),
  
  LX("LX"),
  
  MNG("MNG"),
  
  NIL("NIL"),
  
  NIT("NIT"),
  
  OB("OB"),
  
  PLN("PLN"),
  
  RC("RC"),
  
  REL("REL"),
  
  RET("RET"),
  
  RR("RR"),
  
  RT("RT"),
  
  SCA("SCA"),
  
  SCD("SCD"),
  
  SCL("SCL"),
  
  SCT("SCT"),
  
  STL("STL"),
  
  STT("STT"),
  
  T("T"),
  
  TAR("TAR"),
  
  U("U"),
  
  ZT("ZT");

  private String value;

  EDIFACTID2005(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EDIFACTID2005 fromValue(String value) {
    for (EDIFACTID2005 b : EDIFACTID2005.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EDIFACTID2005> {
    @Override
    public void write(final JsonWriter jsonWriter, final EDIFACTID2005 enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EDIFACTID2005 read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EDIFACTID2005.fromValue(value);
    }
  }
}

