/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * S018
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class S018 {
  public static final String SERIALIZED_NAME_SCENARIO_IDENTIFICATION01 = "ScenarioIdentification_01";
  @SerializedName(SERIALIZED_NAME_SCENARIO_IDENTIFICATION01)
  private String scenarioIdentification01;

  public static final String SERIALIZED_NAME_SCENARIO_VERSION_NUMBER02 = "ScenarioVersionNumber_02";
  @SerializedName(SERIALIZED_NAME_SCENARIO_VERSION_NUMBER02)
  private String scenarioVersionNumber02;

  public static final String SERIALIZED_NAME_SCENARIO_RELEASE_NUMBER03 = "ScenarioReleaseNumber_03";
  @SerializedName(SERIALIZED_NAME_SCENARIO_RELEASE_NUMBER03)
  private String scenarioReleaseNumber03;

  public static final String SERIALIZED_NAME_CONTROLLING_AGENCY_CODED04 = "ControllingAgencyCoded_04";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_AGENCY_CODED04)
  private String controllingAgencyCoded04;

  public S018() {
  }

  public S018 scenarioIdentification01(String scenarioIdentification01) {
    
    this.scenarioIdentification01 = scenarioIdentification01;
    return this;
  }

   /**
   * Get scenarioIdentification01
   * @return scenarioIdentification01
  **/
  @javax.annotation.Nonnull

  public String getScenarioIdentification01() {
    return scenarioIdentification01;
  }


  public void setScenarioIdentification01(String scenarioIdentification01) {
    this.scenarioIdentification01 = scenarioIdentification01;
  }


  public S018 scenarioVersionNumber02(String scenarioVersionNumber02) {
    
    this.scenarioVersionNumber02 = scenarioVersionNumber02;
    return this;
  }

   /**
   * Get scenarioVersionNumber02
   * @return scenarioVersionNumber02
  **/
  @javax.annotation.Nullable

  public String getScenarioVersionNumber02() {
    return scenarioVersionNumber02;
  }


  public void setScenarioVersionNumber02(String scenarioVersionNumber02) {
    this.scenarioVersionNumber02 = scenarioVersionNumber02;
  }


  public S018 scenarioReleaseNumber03(String scenarioReleaseNumber03) {
    
    this.scenarioReleaseNumber03 = scenarioReleaseNumber03;
    return this;
  }

   /**
   * Get scenarioReleaseNumber03
   * @return scenarioReleaseNumber03
  **/
  @javax.annotation.Nullable

  public String getScenarioReleaseNumber03() {
    return scenarioReleaseNumber03;
  }


  public void setScenarioReleaseNumber03(String scenarioReleaseNumber03) {
    this.scenarioReleaseNumber03 = scenarioReleaseNumber03;
  }


  public S018 controllingAgencyCoded04(String controllingAgencyCoded04) {
    
    this.controllingAgencyCoded04 = controllingAgencyCoded04;
    return this;
  }

   /**
   * Get controllingAgencyCoded04
   * @return controllingAgencyCoded04
  **/
  @javax.annotation.Nullable

  public String getControllingAgencyCoded04() {
    return controllingAgencyCoded04;
  }


  public void setControllingAgencyCoded04(String controllingAgencyCoded04) {
    this.controllingAgencyCoded04 = controllingAgencyCoded04;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S018 S018 = (S018) o;
    return Objects.equals(this.scenarioIdentification01, S018.scenarioIdentification01) &&
        Objects.equals(this.scenarioVersionNumber02, S018.scenarioVersionNumber02) &&
        Objects.equals(this.scenarioReleaseNumber03, S018.scenarioReleaseNumber03) &&
        Objects.equals(this.controllingAgencyCoded04, S018.controllingAgencyCoded04);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scenarioIdentification01, scenarioVersionNumber02, scenarioReleaseNumber03, controllingAgencyCoded04);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S018 {\n");
    sb.append("    scenarioIdentification01: ").append(toIndentedString(scenarioIdentification01)).append("\n");
    sb.append("    scenarioVersionNumber02: ").append(toIndentedString(scenarioVersionNumber02)).append("\n");
    sb.append("    scenarioReleaseNumber03: ").append(toIndentedString(scenarioReleaseNumber03)).append("\n");
    sb.append("    controllingAgencyCoded04: ").append(toIndentedString(controllingAgencyCoded04)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ScenarioIdentification_01");
    openapiFields.add("ScenarioVersionNumber_02");
    openapiFields.add("ScenarioReleaseNumber_03");
    openapiFields.add("ControllingAgencyCoded_04");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ScenarioIdentification_01");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to S018
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!S018.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S018 is not found in the empty JSON string", S018.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!S018.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S018` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : S018.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ScenarioIdentification_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScenarioIdentification_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScenarioIdentification_01").toString()));
      }
      if ((jsonObj.get("ScenarioVersionNumber_02") != null && !jsonObj.get("ScenarioVersionNumber_02").isJsonNull()) && !jsonObj.get("ScenarioVersionNumber_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScenarioVersionNumber_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScenarioVersionNumber_02").toString()));
      }
      if ((jsonObj.get("ScenarioReleaseNumber_03") != null && !jsonObj.get("ScenarioReleaseNumber_03").isJsonNull()) && !jsonObj.get("ScenarioReleaseNumber_03").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScenarioReleaseNumber_03` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScenarioReleaseNumber_03").toString()));
      }
      if ((jsonObj.get("ControllingAgencyCoded_04") != null && !jsonObj.get("ControllingAgencyCoded_04").isJsonNull()) && !jsonObj.get("ControllingAgencyCoded_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ControllingAgencyCoded_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ControllingAgencyCoded_04").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S018.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S018' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S018> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S018.class));

       return (TypeAdapter<T>) new TypeAdapter<S018>() {
           @Override
           public void write(JsonWriter out, S018 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S018 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of S018 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of S018
  * @throws IOException if the JSON string is invalid with respect to S018
  */
  public static S018 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S018.class);
  }

 /**
  * Convert an instance of S018 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

