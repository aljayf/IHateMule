/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.CPN;
import org.openapitools.client.model.CVR;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop2TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop2TKTREQ {
  public static final String SERIALIZED_NAME_C_P_N = "CPN";
  @SerializedName(SERIALIZED_NAME_C_P_N)
  private CPN cpn;

  public static final String SERIALIZED_NAME_C_V_R = "CVR";
  @SerializedName(SERIALIZED_NAME_C_V_R)
  private CVR cvr;

  public Loop2TKTREQ() {
  }

  public Loop2TKTREQ cpn(CPN cpn) {
    
    this.cpn = cpn;
    return this;
  }

   /**
   * Get cpn
   * @return cpn
  **/
  @javax.annotation.Nonnull

  public CPN getCPN() {
    return cpn;
  }


  public void setCPN(CPN cpn) {
    this.cpn = cpn;
  }


  public Loop2TKTREQ cvr(CVR cvr) {
    
    this.cvr = cvr;
    return this;
  }

   /**
   * Get cvr
   * @return cvr
  **/
  @javax.annotation.Nullable

  public CVR getCVR() {
    return cvr;
  }


  public void setCVR(CVR cvr) {
    this.cvr = cvr;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop2TKTREQ loop2TKTREQ = (Loop2TKTREQ) o;
    return Objects.equals(this.cpn, loop2TKTREQ.cpn) &&
        Objects.equals(this.cvr, loop2TKTREQ.cvr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpn, cvr);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop2TKTREQ {\n");
    sb.append("    cpn: ").append(toIndentedString(cpn)).append("\n");
    sb.append("    cvr: ").append(toIndentedString(cvr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CPN");
    openapiFields.add("CVR");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CPN");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop2TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop2TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop2TKTREQ is not found in the empty JSON string", Loop2TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop2TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop2TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop2TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `CPN`
      CPN.validateJsonObject(jsonObj.getAsJsonObject("CPN"));
      // validate the optional field `CVR`
      if (jsonObj.get("CVR") != null && !jsonObj.get("CVR").isJsonNull()) {
        CVR.validateJsonObject(jsonObj.getAsJsonObject("CVR"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop2TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop2TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop2TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop2TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop2TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop2TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop2TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop2TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop2TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop2TKTREQ
  */
  public static Loop2TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop2TKTREQ.class);
  }

 /**
  * Convert an instance of Loop2TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

