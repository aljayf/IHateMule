/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C310
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C310 {
  public static final String SERIALIZED_NAME_FIRST_DATE01 = "FirstDate_01";
  @SerializedName(SERIALIZED_NAME_FIRST_DATE01)
  private String firstDate01;

  public static final String SERIALIZED_NAME_FIRST_TIME02 = "FirstTime_02";
  @SerializedName(SERIALIZED_NAME_FIRST_TIME02)
  private String firstTime02;

  public static final String SERIALIZED_NAME_SECOND_DATE03 = "SecondDate_03";
  @SerializedName(SERIALIZED_NAME_SECOND_DATE03)
  private String secondDate03;

  public static final String SERIALIZED_NAME_SECOND_TIME04 = "SecondTime_04";
  @SerializedName(SERIALIZED_NAME_SECOND_TIME04)
  private String secondTime04;

  public static final String SERIALIZED_NAME_DATE_VARIATION05 = "DateVariation_05";
  @SerializedName(SERIALIZED_NAME_DATE_VARIATION05)
  private String dateVariation05;

  public C310() {
  }

  public C310 firstDate01(String firstDate01) {
    
    this.firstDate01 = firstDate01;
    return this;
  }

   /**
   * Get firstDate01
   * @return firstDate01
  **/
  @javax.annotation.Nullable

  public String getFirstDate01() {
    return firstDate01;
  }


  public void setFirstDate01(String firstDate01) {
    this.firstDate01 = firstDate01;
  }


  public C310 firstTime02(String firstTime02) {
    
    this.firstTime02 = firstTime02;
    return this;
  }

   /**
   * Get firstTime02
   * @return firstTime02
  **/
  @javax.annotation.Nullable

  public String getFirstTime02() {
    return firstTime02;
  }


  public void setFirstTime02(String firstTime02) {
    this.firstTime02 = firstTime02;
  }


  public C310 secondDate03(String secondDate03) {
    
    this.secondDate03 = secondDate03;
    return this;
  }

   /**
   * Get secondDate03
   * @return secondDate03
  **/
  @javax.annotation.Nullable

  public String getSecondDate03() {
    return secondDate03;
  }


  public void setSecondDate03(String secondDate03) {
    this.secondDate03 = secondDate03;
  }


  public C310 secondTime04(String secondTime04) {
    
    this.secondTime04 = secondTime04;
    return this;
  }

   /**
   * Get secondTime04
   * @return secondTime04
  **/
  @javax.annotation.Nullable

  public String getSecondTime04() {
    return secondTime04;
  }


  public void setSecondTime04(String secondTime04) {
    this.secondTime04 = secondTime04;
  }


  public C310 dateVariation05(String dateVariation05) {
    
    this.dateVariation05 = dateVariation05;
    return this;
  }

   /**
   * Get dateVariation05
   * @return dateVariation05
  **/
  @javax.annotation.Nullable

  public String getDateVariation05() {
    return dateVariation05;
  }


  public void setDateVariation05(String dateVariation05) {
    this.dateVariation05 = dateVariation05;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C310 C310 = (C310) o;
    return Objects.equals(this.firstDate01, C310.firstDate01) &&
        Objects.equals(this.firstTime02, C310.firstTime02) &&
        Objects.equals(this.secondDate03, C310.secondDate03) &&
        Objects.equals(this.secondTime04, C310.secondTime04) &&
        Objects.equals(this.dateVariation05, C310.dateVariation05);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstDate01, firstTime02, secondDate03, secondTime04, dateVariation05);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C310 {\n");
    sb.append("    firstDate01: ").append(toIndentedString(firstDate01)).append("\n");
    sb.append("    firstTime02: ").append(toIndentedString(firstTime02)).append("\n");
    sb.append("    secondDate03: ").append(toIndentedString(secondDate03)).append("\n");
    sb.append("    secondTime04: ").append(toIndentedString(secondTime04)).append("\n");
    sb.append("    dateVariation05: ").append(toIndentedString(dateVariation05)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FirstDate_01");
    openapiFields.add("FirstTime_02");
    openapiFields.add("SecondDate_03");
    openapiFields.add("SecondTime_04");
    openapiFields.add("DateVariation_05");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C310
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C310.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C310 is not found in the empty JSON string", C310.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C310.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C310` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("FirstDate_01") != null && !jsonObj.get("FirstDate_01").isJsonNull()) && !jsonObj.get("FirstDate_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstDate_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstDate_01").toString()));
      }
      if ((jsonObj.get("FirstTime_02") != null && !jsonObj.get("FirstTime_02").isJsonNull()) && !jsonObj.get("FirstTime_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstTime_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstTime_02").toString()));
      }
      if ((jsonObj.get("SecondDate_03") != null && !jsonObj.get("SecondDate_03").isJsonNull()) && !jsonObj.get("SecondDate_03").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondDate_03` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondDate_03").toString()));
      }
      if ((jsonObj.get("SecondTime_04") != null && !jsonObj.get("SecondTime_04").isJsonNull()) && !jsonObj.get("SecondTime_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SecondTime_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SecondTime_04").toString()));
      }
      if ((jsonObj.get("DateVariation_05") != null && !jsonObj.get("DateVariation_05").isJsonNull()) && !jsonObj.get("DateVariation_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateVariation_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateVariation_05").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C310.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C310' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C310> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C310.class));

       return (TypeAdapter<T>) new TypeAdapter<C310>() {
           @Override
           public void write(JsonWriter out, C310 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C310 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C310 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C310
  * @throws IOException if the JSON string is invalid with respect to C310
  */
  public static C310 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C310.class);
  }

 /**
  * Convert an instance of C310 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

