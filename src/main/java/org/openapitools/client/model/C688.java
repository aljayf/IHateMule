/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.EDIFACTID2005;
import org.openapitools.client.model.EDIFACTID3225;
import org.openapitools.client.model.EDIFACTID8335;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C688
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C688 {
  public static final String SERIALIZED_NAME_DATE_TIME_PERIOD_QUALIFIER01 = "DateTimePeriodQualifier_01";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_PERIOD_QUALIFIER01)
  private EDIFACTID2005 dateTimePeriodQualifier01;

  public static final String SERIALIZED_NAME_FIRST_DATE02 = "FirstDate_02";
  @SerializedName(SERIALIZED_NAME_FIRST_DATE02)
  private String firstDate02;

  public static final String SERIALIZED_NAME_FIRST_TIME03 = "FirstTime_03";
  @SerializedName(SERIALIZED_NAME_FIRST_TIME03)
  private String firstTime03;

  public static final String SERIALIZED_NAME_DATE_TIME_PERIOD_QUALIFIER04 = "DateTimePeriodQualifier_04";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_PERIOD_QUALIFIER04)
  private EDIFACTID2005 dateTimePeriodQualifier04;

  public static final String SERIALIZED_NAME_FIRST_TIME05 = "FirstTime_05";
  @SerializedName(SERIALIZED_NAME_FIRST_TIME05)
  private String firstTime05;

  public static final String SERIALIZED_NAME_MOVEMENT_TYPE06 = "MovementType_06";
  @SerializedName(SERIALIZED_NAME_MOVEMENT_TYPE06)
  private EDIFACTID8335 movementType06;

  public static final String SERIALIZED_NAME_PLACELOCATION_IDENTIFICATION07 = "PlacelocationIdentification_07";
  @SerializedName(SERIALIZED_NAME_PLACELOCATION_IDENTIFICATION07)
  private EDIFACTID3225 placelocationIdentification07;

  public C688() {
  }

  public C688 dateTimePeriodQualifier01(EDIFACTID2005 dateTimePeriodQualifier01) {
    
    this.dateTimePeriodQualifier01 = dateTimePeriodQualifier01;
    return this;
  }

   /**
   * Get dateTimePeriodQualifier01
   * @return dateTimePeriodQualifier01
  **/
  @javax.annotation.Nullable

  public EDIFACTID2005 getDateTimePeriodQualifier01() {
    return dateTimePeriodQualifier01;
  }


  public void setDateTimePeriodQualifier01(EDIFACTID2005 dateTimePeriodQualifier01) {
    this.dateTimePeriodQualifier01 = dateTimePeriodQualifier01;
  }


  public C688 firstDate02(String firstDate02) {
    
    this.firstDate02 = firstDate02;
    return this;
  }

   /**
   * Get firstDate02
   * @return firstDate02
  **/
  @javax.annotation.Nullable

  public String getFirstDate02() {
    return firstDate02;
  }


  public void setFirstDate02(String firstDate02) {
    this.firstDate02 = firstDate02;
  }


  public C688 firstTime03(String firstTime03) {
    
    this.firstTime03 = firstTime03;
    return this;
  }

   /**
   * Get firstTime03
   * @return firstTime03
  **/
  @javax.annotation.Nullable

  public String getFirstTime03() {
    return firstTime03;
  }


  public void setFirstTime03(String firstTime03) {
    this.firstTime03 = firstTime03;
  }


  public C688 dateTimePeriodQualifier04(EDIFACTID2005 dateTimePeriodQualifier04) {
    
    this.dateTimePeriodQualifier04 = dateTimePeriodQualifier04;
    return this;
  }

   /**
   * Get dateTimePeriodQualifier04
   * @return dateTimePeriodQualifier04
  **/
  @javax.annotation.Nullable

  public EDIFACTID2005 getDateTimePeriodQualifier04() {
    return dateTimePeriodQualifier04;
  }


  public void setDateTimePeriodQualifier04(EDIFACTID2005 dateTimePeriodQualifier04) {
    this.dateTimePeriodQualifier04 = dateTimePeriodQualifier04;
  }


  public C688 firstTime05(String firstTime05) {
    
    this.firstTime05 = firstTime05;
    return this;
  }

   /**
   * Get firstTime05
   * @return firstTime05
  **/
  @javax.annotation.Nullable

  public String getFirstTime05() {
    return firstTime05;
  }


  public void setFirstTime05(String firstTime05) {
    this.firstTime05 = firstTime05;
  }


  public C688 movementType06(EDIFACTID8335 movementType06) {
    
    this.movementType06 = movementType06;
    return this;
  }

   /**
   * Get movementType06
   * @return movementType06
  **/
  @javax.annotation.Nullable

  public EDIFACTID8335 getMovementType06() {
    return movementType06;
  }


  public void setMovementType06(EDIFACTID8335 movementType06) {
    this.movementType06 = movementType06;
  }


  public C688 placelocationIdentification07(EDIFACTID3225 placelocationIdentification07) {
    
    this.placelocationIdentification07 = placelocationIdentification07;
    return this;
  }

   /**
   * Get placelocationIdentification07
   * @return placelocationIdentification07
  **/
  @javax.annotation.Nullable

  public EDIFACTID3225 getPlacelocationIdentification07() {
    return placelocationIdentification07;
  }


  public void setPlacelocationIdentification07(EDIFACTID3225 placelocationIdentification07) {
    this.placelocationIdentification07 = placelocationIdentification07;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C688 C688 = (C688) o;
    return Objects.equals(this.dateTimePeriodQualifier01, C688.dateTimePeriodQualifier01) &&
        Objects.equals(this.firstDate02, C688.firstDate02) &&
        Objects.equals(this.firstTime03, C688.firstTime03) &&
        Objects.equals(this.dateTimePeriodQualifier04, C688.dateTimePeriodQualifier04) &&
        Objects.equals(this.firstTime05, C688.firstTime05) &&
        Objects.equals(this.movementType06, C688.movementType06) &&
        Objects.equals(this.placelocationIdentification07, C688.placelocationIdentification07);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTimePeriodQualifier01, firstDate02, firstTime03, dateTimePeriodQualifier04, firstTime05, movementType06, placelocationIdentification07);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C688 {\n");
    sb.append("    dateTimePeriodQualifier01: ").append(toIndentedString(dateTimePeriodQualifier01)).append("\n");
    sb.append("    firstDate02: ").append(toIndentedString(firstDate02)).append("\n");
    sb.append("    firstTime03: ").append(toIndentedString(firstTime03)).append("\n");
    sb.append("    dateTimePeriodQualifier04: ").append(toIndentedString(dateTimePeriodQualifier04)).append("\n");
    sb.append("    firstTime05: ").append(toIndentedString(firstTime05)).append("\n");
    sb.append("    movementType06: ").append(toIndentedString(movementType06)).append("\n");
    sb.append("    placelocationIdentification07: ").append(toIndentedString(placelocationIdentification07)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DateTimePeriodQualifier_01");
    openapiFields.add("FirstDate_02");
    openapiFields.add("FirstTime_03");
    openapiFields.add("DateTimePeriodQualifier_04");
    openapiFields.add("FirstTime_05");
    openapiFields.add("MovementType_06");
    openapiFields.add("PlacelocationIdentification_07");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C688
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C688.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C688 is not found in the empty JSON string", C688.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C688.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C688` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("FirstDate_02") != null && !jsonObj.get("FirstDate_02").isJsonNull()) && !jsonObj.get("FirstDate_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstDate_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstDate_02").toString()));
      }
      if ((jsonObj.get("FirstTime_03") != null && !jsonObj.get("FirstTime_03").isJsonNull()) && !jsonObj.get("FirstTime_03").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstTime_03` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstTime_03").toString()));
      }
      if ((jsonObj.get("FirstTime_05") != null && !jsonObj.get("FirstTime_05").isJsonNull()) && !jsonObj.get("FirstTime_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstTime_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstTime_05").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C688.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C688' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C688> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C688.class));

       return (TypeAdapter<T>) new TypeAdapter<C688>() {
           @Override
           public void write(JsonWriter out, C688 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C688 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C688 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C688
  * @throws IOException if the JSON string is invalid with respect to C688
  */
  public static C688 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C688.class);
  }

 /**
  * Convert an instance of C688 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

