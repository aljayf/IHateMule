/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * C644
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class C644 {
  public static final String SERIALIZED_NAME_PRICING_GROUP01 = "PricingGroup_01";
  @SerializedName(SERIALIZED_NAME_PRICING_GROUP01)
  private String pricingGroup01;

  public static final String SERIALIZED_NAME_PRICING_GROUP02 = "PricingGroup_02";
  @SerializedName(SERIALIZED_NAME_PRICING_GROUP02)
  private String pricingGroup02;

  public static final String SERIALIZED_NAME_PRICING_GROUP03 = "PricingGroup_03";
  @SerializedName(SERIALIZED_NAME_PRICING_GROUP03)
  private String pricingGroup03;

  public static final String SERIALIZED_NAME_PRICING_GROUP04 = "PricingGroup_04";
  @SerializedName(SERIALIZED_NAME_PRICING_GROUP04)
  private String pricingGroup04;

  public static final String SERIALIZED_NAME_PRICING_GROUP05 = "PricingGroup_05";
  @SerializedName(SERIALIZED_NAME_PRICING_GROUP05)
  private String pricingGroup05;

  public C644() {
  }

  public C644 pricingGroup01(String pricingGroup01) {
    
    this.pricingGroup01 = pricingGroup01;
    return this;
  }

   /**
   * Get pricingGroup01
   * @return pricingGroup01
  **/
  @javax.annotation.Nullable

  public String getPricingGroup01() {
    return pricingGroup01;
  }


  public void setPricingGroup01(String pricingGroup01) {
    this.pricingGroup01 = pricingGroup01;
  }


  public C644 pricingGroup02(String pricingGroup02) {
    
    this.pricingGroup02 = pricingGroup02;
    return this;
  }

   /**
   * Get pricingGroup02
   * @return pricingGroup02
  **/
  @javax.annotation.Nullable

  public String getPricingGroup02() {
    return pricingGroup02;
  }


  public void setPricingGroup02(String pricingGroup02) {
    this.pricingGroup02 = pricingGroup02;
  }


  public C644 pricingGroup03(String pricingGroup03) {
    
    this.pricingGroup03 = pricingGroup03;
    return this;
  }

   /**
   * Get pricingGroup03
   * @return pricingGroup03
  **/
  @javax.annotation.Nullable

  public String getPricingGroup03() {
    return pricingGroup03;
  }


  public void setPricingGroup03(String pricingGroup03) {
    this.pricingGroup03 = pricingGroup03;
  }


  public C644 pricingGroup04(String pricingGroup04) {
    
    this.pricingGroup04 = pricingGroup04;
    return this;
  }

   /**
   * Get pricingGroup04
   * @return pricingGroup04
  **/
  @javax.annotation.Nullable

  public String getPricingGroup04() {
    return pricingGroup04;
  }


  public void setPricingGroup04(String pricingGroup04) {
    this.pricingGroup04 = pricingGroup04;
  }


  public C644 pricingGroup05(String pricingGroup05) {
    
    this.pricingGroup05 = pricingGroup05;
    return this;
  }

   /**
   * Get pricingGroup05
   * @return pricingGroup05
  **/
  @javax.annotation.Nullable

  public String getPricingGroup05() {
    return pricingGroup05;
  }


  public void setPricingGroup05(String pricingGroup05) {
    this.pricingGroup05 = pricingGroup05;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    C644 C644 = (C644) o;
    return Objects.equals(this.pricingGroup01, C644.pricingGroup01) &&
        Objects.equals(this.pricingGroup02, C644.pricingGroup02) &&
        Objects.equals(this.pricingGroup03, C644.pricingGroup03) &&
        Objects.equals(this.pricingGroup04, C644.pricingGroup04) &&
        Objects.equals(this.pricingGroup05, C644.pricingGroup05);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pricingGroup01, pricingGroup02, pricingGroup03, pricingGroup04, pricingGroup05);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class C644 {\n");
    sb.append("    pricingGroup01: ").append(toIndentedString(pricingGroup01)).append("\n");
    sb.append("    pricingGroup02: ").append(toIndentedString(pricingGroup02)).append("\n");
    sb.append("    pricingGroup03: ").append(toIndentedString(pricingGroup03)).append("\n");
    sb.append("    pricingGroup04: ").append(toIndentedString(pricingGroup04)).append("\n");
    sb.append("    pricingGroup05: ").append(toIndentedString(pricingGroup05)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PricingGroup_01");
    openapiFields.add("PricingGroup_02");
    openapiFields.add("PricingGroup_03");
    openapiFields.add("PricingGroup_04");
    openapiFields.add("PricingGroup_05");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to C644
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!C644.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in C644 is not found in the empty JSON string", C644.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!C644.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `C644` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("PricingGroup_01") != null && !jsonObj.get("PricingGroup_01").isJsonNull()) && !jsonObj.get("PricingGroup_01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingGroup_01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingGroup_01").toString()));
      }
      if ((jsonObj.get("PricingGroup_02") != null && !jsonObj.get("PricingGroup_02").isJsonNull()) && !jsonObj.get("PricingGroup_02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingGroup_02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingGroup_02").toString()));
      }
      if ((jsonObj.get("PricingGroup_03") != null && !jsonObj.get("PricingGroup_03").isJsonNull()) && !jsonObj.get("PricingGroup_03").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingGroup_03` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingGroup_03").toString()));
      }
      if ((jsonObj.get("PricingGroup_04") != null && !jsonObj.get("PricingGroup_04").isJsonNull()) && !jsonObj.get("PricingGroup_04").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingGroup_04` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingGroup_04").toString()));
      }
      if ((jsonObj.get("PricingGroup_05") != null && !jsonObj.get("PricingGroup_05").isJsonNull()) && !jsonObj.get("PricingGroup_05").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PricingGroup_05` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PricingGroup_05").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!C644.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'C644' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<C644> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(C644.class));

       return (TypeAdapter<T>) new TypeAdapter<C644>() {
           @Override
           public void write(JsonWriter out, C644 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public C644 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of C644 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of C644
  * @throws IOException if the JSON string is invalid with respect to C644
  */
  public static C644 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, C644.class);
  }

 /**
  * Convert an instance of C644 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

