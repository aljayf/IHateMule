/*
 * EdiNation API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.CPN;
import org.openapitools.client.model.EQI;
import org.openapitools.client.model.LoopTIITKTREQ;
import org.openapitools.client.model.TXD;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Loop18TKTREQ
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-04-09T20:30:51.657048-10:00[Pacific/Honolulu]")
public class Loop18TKTREQ {
  public static final String SERIALIZED_NAME_C_P_N = "CPN";
  @SerializedName(SERIALIZED_NAME_C_P_N)
  private CPN cpn;

  public static final String SERIALIZED_NAME_T_X_D = "TXD";
  @SerializedName(SERIALIZED_NAME_T_X_D)
  private TXD txd;

  public static final String SERIALIZED_NAME_E_Q_I = "EQI";
  @SerializedName(SERIALIZED_NAME_E_Q_I)
  private EQI eqi;

  public static final String SERIALIZED_NAME_LOOP_T_I_I = "LoopTII";
  @SerializedName(SERIALIZED_NAME_LOOP_T_I_I)
  private LoopTIITKTREQ loopTII;

  public Loop18TKTREQ() {
  }

  public Loop18TKTREQ cpn(CPN cpn) {
    
    this.cpn = cpn;
    return this;
  }

   /**
   * Get cpn
   * @return cpn
  **/
  @javax.annotation.Nonnull

  public CPN getCPN() {
    return cpn;
  }


  public void setCPN(CPN cpn) {
    this.cpn = cpn;
  }


  public Loop18TKTREQ txd(TXD txd) {
    
    this.txd = txd;
    return this;
  }

   /**
   * Get txd
   * @return txd
  **/
  @javax.annotation.Nullable

  public TXD getTXD() {
    return txd;
  }


  public void setTXD(TXD txd) {
    this.txd = txd;
  }


  public Loop18TKTREQ eqi(EQI eqi) {
    
    this.eqi = eqi;
    return this;
  }

   /**
   * Get eqi
   * @return eqi
  **/
  @javax.annotation.Nullable

  public EQI getEQI() {
    return eqi;
  }


  public void setEQI(EQI eqi) {
    this.eqi = eqi;
  }


  public Loop18TKTREQ loopTII(LoopTIITKTREQ loopTII) {
    
    this.loopTII = loopTII;
    return this;
  }

   /**
   * Get loopTII
   * @return loopTII
  **/
  @javax.annotation.Nullable

  public LoopTIITKTREQ getLoopTII() {
    return loopTII;
  }


  public void setLoopTII(LoopTIITKTREQ loopTII) {
    this.loopTII = loopTII;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Loop18TKTREQ loop18TKTREQ = (Loop18TKTREQ) o;
    return Objects.equals(this.cpn, loop18TKTREQ.cpn) &&
        Objects.equals(this.txd, loop18TKTREQ.txd) &&
        Objects.equals(this.eqi, loop18TKTREQ.eqi) &&
        Objects.equals(this.loopTII, loop18TKTREQ.loopTII);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpn, txd, eqi, loopTII);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Loop18TKTREQ {\n");
    sb.append("    cpn: ").append(toIndentedString(cpn)).append("\n");
    sb.append("    txd: ").append(toIndentedString(txd)).append("\n");
    sb.append("    eqi: ").append(toIndentedString(eqi)).append("\n");
    sb.append("    loopTII: ").append(toIndentedString(loopTII)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CPN");
    openapiFields.add("TXD");
    openapiFields.add("EQI");
    openapiFields.add("LoopTII");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CPN");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Loop18TKTREQ
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Loop18TKTREQ.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Loop18TKTREQ is not found in the empty JSON string", Loop18TKTREQ.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Loop18TKTREQ.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Loop18TKTREQ` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Loop18TKTREQ.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `CPN`
      CPN.validateJsonObject(jsonObj.getAsJsonObject("CPN"));
      // validate the optional field `TXD`
      if (jsonObj.get("TXD") != null && !jsonObj.get("TXD").isJsonNull()) {
        TXD.validateJsonObject(jsonObj.getAsJsonObject("TXD"));
      }
      // validate the optional field `EQI`
      if (jsonObj.get("EQI") != null && !jsonObj.get("EQI").isJsonNull()) {
        EQI.validateJsonObject(jsonObj.getAsJsonObject("EQI"));
      }
      // validate the optional field `LoopTII`
      if (jsonObj.get("LoopTII") != null && !jsonObj.get("LoopTII").isJsonNull()) {
        LoopTIITKTREQ.validateJsonObject(jsonObj.getAsJsonObject("LoopTII"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Loop18TKTREQ.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Loop18TKTREQ' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Loop18TKTREQ> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Loop18TKTREQ.class));

       return (TypeAdapter<T>) new TypeAdapter<Loop18TKTREQ>() {
           @Override
           public void write(JsonWriter out, Loop18TKTREQ value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Loop18TKTREQ read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Loop18TKTREQ given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Loop18TKTREQ
  * @throws IOException if the JSON string is invalid with respect to Loop18TKTREQ
  */
  public static Loop18TKTREQ fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Loop18TKTREQ.class);
  }

 /**
  * Convert an instance of Loop18TKTREQ to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

